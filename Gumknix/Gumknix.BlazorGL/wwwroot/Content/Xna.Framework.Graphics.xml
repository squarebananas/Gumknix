<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xna.Framework.Graphics</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Xna.Framework.Content.ContentReaderExtensions.ReadColor(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary>
            Reads the next Color from the current stream and advances the current position of the stream by 4 bytes.
            </summary>
            <param name="input">The ContentReader.</param>
            <returns>The next Color read from the current stream.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Content.ContentReaderExtensions.GetGraphicsDevice(Microsoft.Xna.Framework.Content.ContentReader)">
            <summary>
            Gets the GraphicsDevice from the ContentManager.ServiceProvider.
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
            <summary>
            Packed vector type containing a single 8 bit normalized W values that is ranging from 0 to 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
            <summary>
            Creates a new instance of Alpha8.
            </summary>
            <param name="alpha">The alpha component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
            <summary>
            Gets the packed vector in float format.
            </summary>
            <returns>The packed vector in Vector3 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
            <summary>
            Compares another Alpha8 packed vector with the packed vector.
            </summary>
            <param name="other">The Alpha8 packed vector to compare.</param>
            <returns>True if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
            <summary>
            Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Bgr565.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates a new instance of Bgr565.
            </summary>
            <param name="vector">Vector containing the components for the packed vector.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
            <summary>
            Gets the packed vector in Vector3 format.
            </summary>
            <returns>The packed vector in Vector3 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
            <summary>
            Compares another Bgr565 packed vector with the packed vector.
            </summary>
            <param name="other">The Bgr565 packed vector to compare.</param>
            <returns>true if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444">
            <summary>
            Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Bgra4444.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new instance of Bgra4444.
            </summary>
            <param name="vector">Vector containing the components for the packed vector.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>true if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
            <summary>
            Compares another Bgra4444 packed vector with the packed vector.
            </summary>
            <param name="other">The Bgra4444 packed vector to compare.</param>
            <returns>true if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
            <summary>
            Packed vector type containing unsigned normalized values ranging from 0 to 1.
            The x , y and z components use 5 bits, and the w component uses 1 bit.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Bgra5551.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new instance of Bgra5551.
            </summary>
            <param name="vector">
            Vector containing the components for the packed vector.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
            <summary>
            Compares another Bgra5551 packed vector with the packed vector.
            </summary>
            <param name="other">The Bgra5551 packed vector to compare.</param>
            <returns>True if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
            <summary>
            Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
            <value>The packed representation of the value.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Initializes a new instance of the Byte4 class.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Byte4 class.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
            <param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are different; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
            <returns>Hash code for the instance.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
            <returns>String that represents the object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Pack(Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Packs a vector into a uint.
            </summary>
            <param name="vector">The vector containing the values to pack.</param>
            <returns>The ulong containing the packed values.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed representation from a Vector4.
            </summary>
            <param name="vector">The vector to create the packed representation from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
            <returns>The expanded vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
            <summary>
            Packed vector type containing four 16-bit floating-point values.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
            <value>The packed representation of the value.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the HalfVector4 structure.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
            <param name="w">Initial value for the q component.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Initializes a new instance of the HalfVector4 structure.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed representation from a Vector4.
            </summary>
            <param name="vector">The vector to create the packed representation from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper(Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Packs a vector into a ulong.
            </summary>
            <param name="vector">The vector containing the values to pack.</param>
            <returns>The ulong containing the packed values.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
            <returns>The expanded vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
            <returns>String that represents the object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
            <returns>Hash code for the instance.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are different; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
            <summary>
            Packed vector type containing two 16-bit unsigned normalized values ranging from 0 to 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of Rg32.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a new instance of Rg32.
            </summary>
            <param name="vector">
            Vector containing the components for the packed vector.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
            <summary>
            Gets the packed vector in Vector2 format.
            </summary>
            <returns>The packed vector in Vector2 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
            <summary>
            Compares another Rg32 packed vector with the packed vector.
            </summary>
            <param name="other">The Rg32 packed vector to compare.</param>
            <returns>True if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
            <summary>
            Packed vector type containing unsigned normalized values ranging from 0 to 1.
            The x, y and z components use 10 bits, and the w component uses 2 bits.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Rgba1010102.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new instance of Rgba1010102.
            </summary>
            <param name="vector">
            Vector containing the components for the packed vector.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
            <summary>
            Compares another Rgba1010102 packed vector with the packed vector.
            </summary>
            <param name="other">The Rgba1010102 packed vector to compare.</param>
            <returns>True if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
            <summary>
            Packed vector type containing four 16-bit unsigned normalized values ranging from 0 to 1.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
            <summary>
            Gets and sets the packed value.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of Rgba64.
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Creates a new instance of Rgba64.
            </summary>
            <param name="vector">
            Vector containing the components for the packed vector.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed vector from a Vector4.
            </summary>
            <param name="vector">Vector containing the components.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
            <summary>
            Compares an object with the packed vector.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the object is equal to the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
            <summary>
            Compares another Rgba64 packed vector with the packed vector.
            </summary>
            <param name="other">The Rgba64 packed vector to compare.</param>
            <returns>True if the packed vectors are equal.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
            <summary>
            Gets a string representation of the packed vector.
            </summary>
            <returns>A string representation of the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
            <summary>
            Gets a hash code of the packed vector.
            </summary>
            <returns>The hash code for the packed vector.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector4">
            <summary>
            Gets the packed vector in Vector4 format.
            </summary>
            <returns>The packed vector in Vector4 format</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
            <summary>
            Packed vector type containing four 16-bit signed integer values.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
            <summary>
            Directly gets or sets the packed representation of the value.
            </summary>
            <value>The packed representation of the value.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Initializes a new instance of the Short4 class.
            </summary>
            <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Short4 class.
            </summary>
            <param name="x">Initial value for the x component.</param>
            <param name="y">Initial value for the y component.</param>
            <param name="z">Initial value for the z component.</param>
            <param name="w">Initial value for the w component.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are different.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are different; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
            <summary>
            Compares the current instance of a class to another instance to determine whether they are the same.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the objects are the same; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="other">The object with which to make the comparison.</param>
            <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
            <returns>Hash code for the instance.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
            <summary>
            Returns a string representation of the current instance.
            </summary>
            <returns>String that represents the object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Pack(Microsoft.Xna.Framework.Vector4@)">
            <summary>
            Packs a vector into a ulong.
            </summary>
            <param name="vector">The vector containing the values to pack.</param>
            <returns>The ulong containing the packed values.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Sets the packed representation from a Vector4.
            </summary>
            <param name="vector">The vector to create the packed representation from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
            <summary>
            Expands the packed representation into a Vector4.
            </summary>
            <returns>The expanded vector.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.AlphaTestEffect">
            <summary>
            Built-in effect that supports alpha testing.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.AlphaFunction">
            <summary>
            Gets or sets the alpha compare function (default Greater).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value (default 0).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new AlphaTestEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.#ctor(Microsoft.Xna.Framework.Graphics.AlphaTestEffect)">
            <summary>
            Creates a new AlphaTestEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.Clone">
            <summary>
            Creates a clone of the current AlphaTestEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.CacheEffectParameters">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.AlphaTestEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BasicEffect">
            <summary>
            Built-in effect that supports optional texturing, vertex coloring, fog, and lighting.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularColor">
            <summary>
            Gets or sets the material specular color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularPower">
            <summary>
            Gets or sets the material specular power.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.LightingEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.PreferPerPixelLighting">
            <summary>
            Gets or sets the per-pixel lighting prefer flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientLightColor">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight0">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight1">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight2">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogStart">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnd">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogColor">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.TextureEnabled">
            <summary>
            Gets or sets whether texturing is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new BasicEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Creates a new BasicEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.Clone">
            <summary>
            Creates a clone of the current BasicEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.EnableDefaultLighting">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.DualTextureEffect">
            <summary>
            Built-in effect that supports two-layer multitexturing.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture">
            <summary>
            Gets or sets the current base texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Texture2">
            <summary>
            Gets or sets the current overlay texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.DualTextureEffect.VertexColorEnabled">
            <summary>
            Gets or sets whether vertex color is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new DualTextureEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.#ctor(Microsoft.Xna.Framework.Graphics.DualTextureEffect)">
            <summary>
            Creates a new DualTextureEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.Clone">
            <summary>
            Creates a clone of the current DualTextureEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.CacheEffectParameters">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.DualTextureEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Clone the source into this existing object.
            </summary>
            <remarks>
            Note this is not overloaded in derived classes on purpose.  This is
            only a reason this exists is for caching effects.
            </remarks>
            <param name="cloneSource">The source effect to clone from.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone">
            <summary>
            Returns a deep copy of the effect where immutable types 
            are shared and mutable data is duplicated.
            </summary>
            <remarks>
            See "Cloning an Effect" in MSDN:
            http://msdn.microsoft.com/en-us/library/windows/desktop/ff476138(v=vs.85).aspx
            </remarks>
            <returns>The cloned effect.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectDirtyFlags">
            <summary>
            Track which effect parameters need to be recomputed during the next OnApply.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectHelpers">
            <summary>
            Helper code shared between the various built-in effects.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.EnableDefaultLighting(Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight,Microsoft.Xna.Framework.Graphics.DirectionalLight)">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetWorldViewProjAndFog(Microsoft.Xna.Framework.Graphics.EffectDirtyFlags,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Boolean,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Lazily recomputes the world+view+projection matrix and
            fog vector based on the current effect parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetFogVector(Microsoft.Xna.Framework.Matrix@,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Sets a vector which can be dotted with the object space vertex position to compute fog amount.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetLightingMatrices(Microsoft.Xna.Framework.Graphics.EffectDirtyFlags,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Lazily recomputes the world inverse transpose matrix and
            eye position based on the current effect parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EffectHelpers.SetMaterialColor(System.Boolean,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Graphics.EffectParameter,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Sets the diffuse/emissive/alpha material color parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.NextStateKey">
            <summary>
            The next state key used when an effect parameter
            is updated by any of the 'set' methods.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.StateKey">
            <summary>
            The current state key which is used to detect
            if the parameter value has been changed.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.DebugDisplayString">
            <summary>
            Property referenced by the DebuggerDisplayAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterClass">
            <summary>
            Defines classes for effect parameters and shader constants.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Scalar">
            <summary>
            Scalar class type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Vector">
            <summary>
            Vector class type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Matrix">
            <summary>
            Matrix class type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Object">
            <summary>
            Class type for textures, shaders or strings. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterClass.Struct">
            <summary>
            Structure class type.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterType">
            <summary>
            Defines types for effect parameters and shader constants.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Void">
            <summary>
            Pointer to void type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Bool">
            <summary>
            Boolean type. Any non-zero will be <c>true</c>; <c>false</c> otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Int32">
            <summary>
            32-bit integer type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Single">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture">
            <summary>
            Any texture type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture1D">
            <summary>
            1D-texture type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture2D">
            <summary>
            2D-texture type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.Texture3D">
            <summary>
            3D-texture type.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.EffectParameterType.TextureCube">
            <summary>
            Cubic texture type.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect">
            <summary>
            Built-in effect that supports environment mapping.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMap">
            <summary>
            Gets or sets the current environment map texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapAmount">
            <summary>
            Gets or sets the amount of the environment map RGB that will be blended over 
            the base texture. Range 0 to 1, default 1. If set to zero, the RGB channels 
            of the environment map will completely ignored (but the environment map alpha 
            may still be visible if EnvironmentMapSpecular is greater than zero).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnvironmentMapSpecular">
            <summary>
            Gets or sets the amount of the environment map alpha channel that will 
            be added to the base texture. Range 0 to 1, default 0. This can be used 
            to implement cheap specular lighting, by encoding one or more specular 
            highlight patterns into the environment map alpha channel, then setting 
            EnvironmentMapSpecular to the desired specular light color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.FresnelFactor">
            <summary>
            Gets or sets the Fresnel factor used for the environment map blending. 
            Higher values make the environment map only visible around the silhouette 
            edges of the object, while lower values make it visible everywhere. 
            Setting this property to 0 disables Fresnel entirely, making the 
            environment map equally visible regardless of view angle. The default is 1.
            Fresnel only affects the environment map RGB (the intensity of which is 
            controlled by EnvironmentMapAmount). The alpha contribution (controlled by 
            EnvironmentMapSpecular) is not affected by the Fresnel setting.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
            <summary>
            This effect requires lighting, so we explicitly implement
            IEffectLights.LightingEnabled, and do not allow turning it off.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new EnvironmentMapEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.#ctor(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
            <summary>
            Creates a new EnvironmentMapEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.Clone">
            <summary>
            Creates a clone of the current EnvironmentMapEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IEffectBones">
            <summary>
            Interface for Effects that support bone transforms.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IEffectBones.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets an array of skinning bone transform matrices.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IEffectFog">
            <summary>
            The common effect fog rendering parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogColor">
            <summary>
            The floating point fog color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnabled">
            <summary>
            Used to toggle the rendering of fog.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogEnd">
            <summary>
            The world space distance from the camera at which fogging is fully applied.
            </summary>
            <remarks>
            FogEnd should be greater than FogStart.  If FogEnd and FogStart 
            are the same value everything is fully fogged.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectFog.FogStart">
            <summary>
            The world space distance from the camera at which fogging begins.
            </summary>
            <remarks>
            FogStart should be less than FogEnd.  If FogEnd and FogStart are the
            same value everything is fully fogged.
            </remarks>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IEffectLights">
            <summary>
            The common effect light rendering parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.AmbientLightColor">
            <summary>
            The floating point ambient light color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight0">
            <summary>
            Returns the first directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight1">
            <summary>
            Returns the second directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.DirectionalLight2">
            <summary>
            Returns the third directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IEffectLights.LightingEnabled">
            <summary>
            Toggles the rendering of lighting.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IEffectLights.EnableDefaultLighting">
            <summary>
            Initializes the lights to the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.KNIFXHeader.KNIFXSignature">
            <summary>
            The KNI Effect file format header identifier ("KNIF").
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.KNIFXHeader.CurrentKNIFXVersion">
            <summary>
            The current KNI Effect file format versions
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.MGFXHeader.MGFXSignature">
            <summary>
            The MonoGame Effect file format header identifier ("MGFX"). 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.MGFXHeader.MGFXVersion">
            <summary>
            The current MonoGame Effect file format versions
            used to detect old packaged content.
            </summary>
            <remarks>
            We should avoid supporting old versions for very long if at all 
            as users should be rebuilding content when packaging their game.
            </remarks>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SkinnedEffect">
            <summary>
            Built-in effect for rendering skinned character models.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.World">
            <summary>
            Gets or sets the world matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.View">
            <summary>
            Gets or sets the view matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Projection">
            <summary>
            Gets or sets the projection matrix.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DiffuseColor">
            <summary>
            Gets or sets the material diffuse color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EmissiveColor">
            <summary>
            Gets or sets the material emissive color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularColor">
            <summary>
            Gets or sets the material specular color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SpecularPower">
            <summary>
            Gets or sets the material specular power.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Alpha">
            <summary>
            Gets or sets the material alpha.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.PreferPerPixelLighting">
            <summary>
            Gets or sets the per-pixel lighting prefer flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color (range 0 to 1).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight0">
            <summary>
            Gets the first directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight1">
            <summary>
            Gets the second directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.DirectionalLight2">
            <summary>
            Gets the third directional light.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnabled">
            <summary>
            Gets or sets the fog enable flag.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogStart">
            <summary>
            Gets or sets the fog start distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogEnd">
            <summary>
            Gets or sets the fog end distance.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Texture">
            <summary>
            Gets or sets the current texture.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.WeightsPerVertex">
            <summary>
            Gets or sets the number of skinning weights to evaluate for each vertex (1, 2, or 4).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets an array of skinning bone transform matrices.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.GetBoneTransforms(System.Int32)">
            <summary>
            Gets a copy of the current skinning bone transform matrices.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Microsoft#Xna#Framework#Graphics#IEffectLights#LightingEnabled">
            <summary>
            This effect requires lighting, so we explicitly implement
            IEffectLights.LightingEnabled, and do not allow turning it off.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new SkinnedEffect with default parameter settings.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.#ctor(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
            <summary>
            Creates a new SkinnedEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.Clone">
            <summary>
            Creates a clone of the current SkinnedEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.EnableDefaultLighting">
            <summary>
            Sets up the standard key/fill/back lighting rig.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.CacheEffectParameters(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SkinnedEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffect">
            <summary>
            The default effect used by SpriteBatch.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new SpriteEffect.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteEffect.TransformMatrix">
            <summary>
            An optional matrix used to transform the sprite geometry. Uses <see cref="P:Microsoft.Xna.Framework.Matrix.Identity"/> if null.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.#ctor(Microsoft.Xna.Framework.Graphics.SpriteEffect)">
            <summary>
            Creates a new SpriteEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.Clone">
            <summary>
            Creates a clone of the current SpriteEffect instance.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.CacheEffectParameters">
            <summary>
            Looks up shortcut references to our effect parameters.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteEffect.OnApply">
            <summary>
            Lazily computes derived parameter values immediately before applying the effect.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
            <summary>
            Defines a blend mode.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.One">
            <summary>
            Each component of the color is multiplied by {1, 1, 1, 1}.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.Zero">
            <summary>
            Each component of the color is multiplied by {0, 0, 0, 0}.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceColor">
            <summary>
            Each component of the color is multiplied by the source color. 
            {Rs, Gs, Bs, As}, where Rs, Gs, Bs, As are color source values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceColor">
            <summary>
            Each component of the color is multiplied by the inverse of the source color.
             {1 − Rs, 1 − Gs, 1 − Bs, 1 − As}, where Rs, Gs, Bs, As are color source values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha">
            <summary>
            Each component of the color is multiplied by the alpha value of the source. 
            {As, As, As, As}, where As is the source alpha value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseSourceAlpha">
            <summary>
            Each component of the color is multiplied by the inverse of the alpha value of the source. 
            {1 − As, 1 − As, 1 − As, 1 − As}, where As is the source alpha value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationColor">
            <summary>
            Each component color is multiplied by the destination color. 
            {Rd, Gd, Bd, Ad}, where Rd, Gd, Bd, Ad are color destination values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationColor">
            <summary>
            Each component of the color is multiplied by the inversed destination color. 
            {1 − Rd, 1 − Gd, 1 − Bd, 1 − Ad}, where Rd, Gd, Bd, Ad are color destination values.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.DestinationAlpha">
            <summary>
            Each component of the color is multiplied by the alpha value of the destination.
            {Ad, Ad, Ad, Ad}, where Ad is the destination alpha value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseDestinationAlpha">
            <summary>
            Each component of the color is multiplied by the inversed alpha value of the destination. 
            {1 − Ad, 1 − Ad, 1 − Ad, 1 − Ad}, where Ad is the destination alpha value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.BlendFactor">
            <summary>
            Each component of the color is multiplied by a constant in the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.InverseBlendFactor">
            <summary>
            Each component of the color is multiplied by a inversed constant in the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.Blend.SourceAlphaSaturation">
            <summary>
            Each component of the color is multiplied by either the alpha of the source color, or the inverse of the alpha of the source color, whichever is greater. 
            {f, f, f, 1}, where f = min(As, 1 − As), where As is the source alpha value.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
            <summary>
            Defines a function for color blending.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Add">
            <summary>
            The function will adds destination to the source. (srcColor * srcBlend) + (destColor * destBlend)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Subtract">
            <summary>
            The function will subtracts destination from source. (srcColor * srcBlend) − (destColor * destBlend)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.ReverseSubtract">
            <summary>
            The function will subtracts source from destination. (destColor * destBlend) - (srcColor * srcBlend) 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Min">
            <summary>
            The function will extracts minimum of the source and destination. min((srcColor * srcBlend),(destColor * destBlend))
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BlendFunction.Max">
            <summary>
            The function will extracts maximum of the source and destination. max((srcColor * srcBlend),(destColor * destBlend))
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.IndependentBlendEnable">
            <summary>
            Enables use of the per-target blend states.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.Item(System.Int32)">
            <summary>
            Returns the target specific blend state.
            </summary>
            <param name="index">The 0 to 3 target blend state index.</param>
            <returns>A target blend state.</returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.BlendState.BlendFactor">
            <summary>
            The color used as blend factor when alpha blending.
            </summary>
            <remarks>
            <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor"/> is set to this value when this <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState"/>
            is bound to a GraphicsDevice.
            </remarks>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
            <summary>
            The comparison function used for depth, stencil, and alpha tests.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Always">
            <summary>
            Always passes the test.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Never">
            <summary>
            Never passes the test.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Less">
            <summary>
            Passes the test when the new value is less than current value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.LessEqual">
            <summary>
            Passes the test when the new value is less than or equal to current value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Equal">
            <summary>
            Passes the test when the new value is equal to current value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.GreaterEqual">
            <summary>
            Passes the test when the new value is greater than or equal to current value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.Greater">
            <summary>
            Passes the test when the new value is greater than current value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CompareFunction.NotEqual">
            <summary>
            Passes the test when the new value does not equal to current value.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
            <summary>
            Defines a culling mode for faces in rasterization process.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.None">
            <summary>
            Do not cull faces.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullClockwiseFace">
            <summary>
            Cull faces with clockwise order.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CullMode.CullCounterClockwiseFace">
            <summary>
            Cull faces with counter clockwise order.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
            <summary>
            Defines formats for depth-stencil buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.None">
            <summary>
            Depth-stencil buffer will not be created.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth16">
            <summary>
            16-bit depth buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24">
            <summary>
            24-bit depth buffer. Equivalent of <see cref="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8"/> for DirectX platforms.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8">
            <summary>
            32-bit depth-stencil buffer. Where 24-bit depth and 8-bit for stencil used.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
            <summary>
            Defines options for filling the primitive.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.Solid">
            <summary>
            Draw solid faces for each primitive.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.FillMode.WireFrame">
            <summary>
            Draw lines for each primitive.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.ComparisonFunction">
            <summary>
            When using comparison sampling, also set <see cref="P:Microsoft.Xna.Framework.Graphics.SamplerState.FilterMode"/> to <see cref="F:Microsoft.Xna.Framework.Graphics.TextureFilterMode.Comparison"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
            <summary>
            Defines stencil buffer operations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Keep">
            <summary>
            Does not update the stencil buffer entry.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Zero">
            <summary>
            Sets the stencil buffer entry to 0.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Replace">
            <summary>
            Replaces the stencil buffer entry with a reference value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Increment">
            <summary>
            Increments the stencil buffer entry, wrapping to 0 if the new value exceeds the maximum value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Decrement">
            <summary>
            Decrements the stencil buffer entry, wrapping to the maximum value if the new value is less than 0.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            Increments the stencil buffer entry, clamping to the maximum value.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            Decrements the stencil buffer entry, clamping to 0.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.StencilOperation.Invert">
            <summary>
            Inverts the bits in the stencil buffer entry.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
            <summary>
            Defines modes for addressing texels using texture coordinates that are outside of the range of 0.0 to 1.0.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap">
            <summary>
            Texels outside range will form the tile at every integer junction.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp">
            <summary>
            Texels outside range will be set to color of 0.0 or 1.0 texel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Mirror">
            <summary>
            Same as <see cref="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Wrap"/> but tiles will also flipped at every integer junction.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureAddressMode.Border">
            <summary>
            Texels outside range will be set to the border color.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
            <summary>
            Defines filtering types for texture sampler.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Linear">
            <summary>
            Use linear filtering.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Point">
            <summary>
            Use point filtering.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.Anisotropic">
            <summary>
            Use anisotropic filtering.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.LinearMipPoint">
            <summary>
            Use linear filtering to shrink or expand, and point filtering between mipMap levels (mip).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.PointMipLinear">
            <summary>
            Use point filtering to shrink (minify) or expand (magnify), and linear filtering between mipMap levels.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipLinear">
            <summary>
            Use linear filtering to shrink, point filtering to expand, and linear filtering between mipMap levels.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinLinearMagPointMipPoint">
            <summary>
            Use linear filtering to shrink, point filtering to expand, and point filtering between mipMap levels.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipLinear">
            <summary>
            Use point filtering to shrink, linear filtering to expand, and linear filtering between mipMap levels.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.TextureFilter.MinPointMagLinearMipPoint">
            <summary>
            Use point filtering to shrink, linear filtering to expand, and point filtering between mipMap levels.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilterMode">
            <summary>
            Filtering modes for texture samplers.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.BufferUsage">
            <summary>
            A usage hint for optimizing memory placement of graphics buffers.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.None">
            <summary>
            No special usage.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly">
            <summary>
            The buffer will not be readable and will be optimized for rendering and writing.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SizeForType(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type)">
            <summary>
            Gets the relevant IndexElementSize enum value for the given type.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="type">The type to use for the index buffer</param>
            <returns>The IndexElementSize enum value that matches the type</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
            <summary>
            Defines size for index in <see cref="T:Microsoft.Xna.Framework.Graphics.IndexBuffer"/> and <see cref="T:Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits">
            <summary>
            16-bit short/ushort value been used.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.IndexElementSize.ThirtyTwoBits">
            <summary>
            32-bit int/uint value been used.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
            <summary>
            Defines how vertex data is ordered.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleList">
            <summary>
            Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineList">
            <summary>
            Renders the vertices as a list of isolated straight line segments; the count may be any positive integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.LineStrip">
            <summary>
            Renders the vertices as a single polyline; the count may be any positive integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PrimitiveType.PointList">
            <summary>
            Renders the vertices as individual points; the count may be any positive integer.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
             <summary>
             Get the vertex data froom this VertexBuffer.
             </summary>
             <typeparam name="T">The struct you want to fill.</typeparam>
             <param name="offsetInBytes">The offset to the first element in the vertex buffer in bytes.</param>
             <param name="data">An array of T's to be filled.</param>
             <param name="startIndex">The index to start filling the data array.</param>
             <param name="elementCount">The number of T's to get.</param>
             <param name="vertexStride">The size of how a vertex buffer element should be interpreted.</param>
            
             <remarks>
             Note that this pulls data from VRAM into main memory and because of that is a very expensive operation.
             It is often a better idea to keep a copy of the data in main memory.
             </remarks>
            
             <remarks>
             <p>Using this operation it is easy to get certain vertex elements from a VertexBuffer.</p>
             <p>
             For example to get the texture coordinates from a VertexBuffer of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture"/> you can call 
             GetData(4 * 3, data, elementCount, 20). 'data'should be an array of <see cref="T:Microsoft.Xna.Framework.Vector2"/> in this example.
             The offsetInBytes is the number of bytes taken up by the <see cref="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position"/> of the vertex.
             For vertexStride we pass the size of a <see cref="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture"/>.
             </p>
             </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
            the number of elements to copy from the source data array, 
            and how far apart elements from the source data array should be when they are copied into the vertex buffer.
            </summary>
            <typeparam name="T">Type of elements in the data array.</typeparam>
            <param name="offsetInBytes">Offset in bytes from the beginning of the vertex buffer to the start of the copied data.</param>
            <param name="data">Data array.</param>
            <param name="startIndex">Index at which to start copying from <paramref name="data"/>.
            Must be within the <paramref name="data"/> array bounds.</param>
            <param name="elementCount">Number of elements to copy from <paramref name="data"/>.
            The combination of <paramref name="startIndex"/> and <paramref name="elementCount"/> 
            must be within the <paramref name="data"/> array bounds.</param>
            <param name="vertexStride">Specifies how far apart, in bytes, elements from <paramref name="data"/> should be when 
            they are copied into the vertex buffer.
            In almost all cases this should be <c>sizeof(T)</c>, to create a tightly-packed vertex buffer.
            If you specify <c>sizeof(T)</c>, elements from <paramref name="data"/> will be copied into the 
            vertex buffer with no padding between each element.
            If you specify a value greater than <c>sizeof(T)</c>, elements from <paramref name="data"/> will be copied 
            into the vertex buffer with padding between each element.
            If you specify <c>0</c> for this parameter, it will be treated as if you had specified <c>sizeof(T)</c>.
            With the exception of <c>0</c>, you must specify a value greater than or equal to <c>sizeof(T)</c>.</param>
            <remarks>
            If <c>T</c> is <c>VertexPositionTexture</c>, but you want to set only the position component of the vertex data,
            you would call this method as follows:
            <code>
            Vector3[] positions = new Vector3[numVertices];
            vertexBuffer.SetData(0, positions, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
            </code>
            
            Continuing from the previous example, if you want to set only the texture coordinate component of the vertex data,
            you would call this method as follows (note the use of <paramref name="offsetInBytes"/>:
            <code>
            Vector2[] texCoords = new Vector2[numVertices];
            vertexBuffer.SetData(12, texCoords, 0, numVertices, vertexBuffer.VertexDeclaration.VertexStride);
            </code>
            </remarks>
            <remarks>
            If you provide a <c>byte[]</c> in the <paramref name="data"/> parameter, then you should almost certainly
            set <paramref name="vertexStride"/> to <c>1</c>, to avoid leaving any padding between the <c>byte</c> values
            when they are copied into the vertex buffer.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer data, specifying the index at which to start copying from the source data array,
            and the number of elements to copy from the source data array. This is the same as calling 
            <see cref="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)"/>  with <c>offsetInBytes</c> equal to <c>0</c>,
            and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
            </summary>
            <typeparam name="T">Type of elements in the data array.</typeparam>
            <param name="data">Data array.</param>
            <param name="startIndex">Index at which to start copying from <paramref name="data"/>.
            Must be within the <paramref name="data"/> array bounds.</param>
            <param name="elementCount">Number of elements to copy from <paramref name="data"/>.
            The combination of <paramref name="startIndex"/> and <paramref name="elementCount"/> 
            must be within the <paramref name="data"/> array bounds.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(``0[])">
            <summary>
            Sets the vertex buffer data. This is the same as calling <see cref="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,``0[],System.Int32,System.Int32,System.Int32)"/> 
            with <c>offsetInBytes</c> and <c>startIndex</c> equal to <c>0</c>, <c>elementCount</c> equal to <c>data.Length</c>, 
            and <c>vertexStride</c> equal to <c>sizeof(T)</c>.
            </summary>
            <typeparam name="T">Type of elements in the data array.</typeparam>
            <param name="data">Data array.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding">
            <summary>
            Defines how a vertex buffer is bound to the graphics device for rendering.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexBuffer">
            <summary>
            Gets the vertex buffer.
            </summary>
            <value>The vertex buffer.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.VertexOffset">
            <summary>
            Gets the index of the first vertex in the vertex buffer to use.
            </summary>
            <value>The index of the first vertex in the vertex buffer to use.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.InstanceFrequency">
            <summary>
            Gets the number of instances to draw using the same per-instance data before advancing
            in the buffer by one element.
            </summary>
            <value>
            The number of instances to draw using the same per-instance data before advancing in the
            buffer by one element. This value must be 0 for an element that contains per-vertex
            data and greater than 0 for per-instance data.
            </value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding"/>.
            </summary>
            <param name="vertexBuffer">The vertex buffer to bind.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Xna.Framework.Graphics.VertexBufferBinding"/>.
            </summary>
            <param name="vertexBuffer">The vertex buffer to bind.</param>
            <param name="vertexOffset">
            The index of the first vertex in the vertex buffer to use.
            </param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexBufferBinding.#ctor(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,System.Int32)">
            <summary>
            Creates an instance of VertexBufferBinding.
            </summary>
            <param name="vertexBuffer">The vertex buffer to bind.</param>
            <param name="vertexOffset">
            The index of the first vertex in the vertex buffer to use.
            </param>
            <param name="instanceFrequency">
            The number of instances to draw using the same per-instance data before advancing in the
            buffer by one element. This value must be 0 for an element that contains per-vertex data
            and greater than 0 for per-instance data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertexBuffer"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="vertexOffset"/> or <paramref name="instanceFrequency"/> is invalid.
            </exception>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
            <summary>
            Defines per-vertex data of a vertex buffer.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> implements <see cref="T:System.IEquatable`1"/> and can be used as
            a key in a dictionary. Two vertex declarations are considered equal if the vertices are
            structurally equivalent, i.e. the vertex elements and the vertex stride are identical. (The
            properties <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Name"/> and <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsResource.Tag"/> are
            ignored in <see cref="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetHashCode"/> and <see cref="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(Microsoft.Xna.Framework.Graphics.VertexDeclaration)"/>!)
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Microsoft#Xna#Platform#Graphics#IPlatformVertexDeclaration#InternalVertexElements">
            <summary>
            Gets the internal vertex elements array.
            </summary>
            <value>The internal vertex elements array.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.VertexElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The vertex elements.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="vertexStride">The size of a vertex (including padding) in bytes.</param>
            <param name="elements">The vertex elements.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="elements"/> is <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.FromType(System.Type)">
            <summary>
            Returns the VertexDeclaration for Type.
            </summary>
            <param name="vertexType">A value type which implements the IVertexType interface.</param>
            <returns>The VertexDeclaration.</returns>
            <remarks>
            Prefer to use VertexDeclarationCache when the declaration lookup
            can be performed with a templated type.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
            <summary>
            Gets a copy of the vertex elements.
            </summary>
            <returns>A copy of the vertex elements.</returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.VertexStride">
            <summary>
            Gets the size of a vertex (including padding) in bytes.
            </summary>
            <value>The size of a vertex (including padding) in bytes.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> is equal to this
            instance.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> is equal to this
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Equality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> instances to determine whether they are the
            same.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
            the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> instances to determine whether they are
            different.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
            the different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclarationCache`1">
            <summary>
            Helper class which ensures we only lookup a vertex 
            declaration for a particular type once.
            </summary>
            <typeparam name="T">A vertex structure which implements IVertexType.</typeparam>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
            <summary>
            Defines a single element in a vertex.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
            <summary>
            Gets or sets the offset in bytes from the beginning of the stream to the vertex element.
            </summary>
            <value>The offset in bytes.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
            <summary>
            Gets or sets the data format.
            </summary>
            <value>The data format.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
            <summary>
            Gets or sets the HLSL semantic of the element in the vertex shader input.
            </summary>
            <value>The HLSL semantic of the element in the vertex shader input.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
            <summary>
            Gets or sets the semantic index.
            </summary>
            <value>
            The semantic index, which is required if the semantic is used for more than one vertex
            element.
            </value>
            <remarks>
            Usage indices in a vertex declaration usually start with 0. When multiple vertex buffers
            are bound to the input assembler stage (see <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexBuffers(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])"/>),
            MonoGame internally adjusts the usage indices based on the order in which the vertex
            buffers are bound.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> struct.
            </summary>
            <param name="offset">The offset in bytes from the beginning of the stream to the vertex element.</param>
            <param name="elementFormat">The element format.</param>
            <param name="elementUsage">The HLSL semantic of the element in the vertex shader input-signature.</param>
            <param name="usageIndex">The semantic index, which is required if the semantic is used for more than one vertex element.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(Microsoft.Xna.Framework.Graphics.VertexElement)">
            <summary>
            Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> is equal to this
            instance.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> is equal to this
            instance; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
            <summary>
            Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> instances to determine whether they are the
            same.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
            the same; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
            <summary>
            Compares two <see cref="T:Microsoft.Xna.Framework.Graphics.VertexElement"/> instances to determine whether they are
            different.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>
            <see langword="true"/> if the <paramref name="left"/> and <paramref name="right"/> are
            the different; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
            <summary>
            Defines vertex element formats.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Single">
            <summary>
            Single 32-bit floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2">
            <summary>
            Two component 32-bit floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3">
            <summary>
            Three component 32-bit floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector4">
            <summary>
            Four component 32-bit floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color">
            <summary>
            Four component, packed unsigned byte, mapped to 0 to 1 range. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Byte4">
            <summary>
            Four component unsigned byte.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short2">
            <summary>
            Two component signed 16-bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.Short4">
            <summary>
            Four component signed 16-bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort2">
            <summary>
            Normalized, two component signed 16-bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.NormalizedShort4">
            <summary>
            Normalized, four component signed 16-bit integer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector2">
            <summary>
            Two component 16-bit floating point number.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementFormat.HalfVector4">
            <summary>
            Four component 16-bit floating point number.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
            <summary>
            Defines usage for vertex elements.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position">
            <summary>
            Position data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color">
            <summary>
            Color data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Texture coordinate data or can be used for user-defined data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal">
            <summary>
            Normal data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Binormal">
            <summary>
            Binormal data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Tangent">
            <summary>
            Tangent data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendIndices">
            <summary>
            Blending indices data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.BlendWeight">
            <summary>
            Blending weight data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Depth">
            <summary>
            Depth data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Fog">
            <summary>
            Fog data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.PointSize">
            <summary>
            Point size data. Usable for drawing point sprites.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.Sample">
            <summary>
            Sampler data for specifies the displacement value to look up.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.VertexElementUsage.TessellateFactor">
            <summary>
            Single, positive float value, specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
            <summary>
            Defines the buffers for clearing when calling <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Color,System.Single,System.Int32)"/> operation.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Target">
            <summary>
            Color buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer">
            <summary>
            Depth buffer.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil">
            <summary>
            Stencil buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteChannels">
            <summary>
            Defines the color channels for render target blending operations.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.None">
            <summary>
            No channels selected.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Red">
            <summary>
            Red channel selected.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Green">
            <summary>
            Green channel selected.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Blue">
            <summary>
            Blue channel selected.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.Alpha">
            <summary>
            Alpha channel selected.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.ColorWriteChannels.All">
            <summary>
            All channels selected.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
            <summary>
            Defines the faces in a cube map for the <see cref="T:Microsoft.Xna.Framework.Graphics.TextureCube"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX">
            <summary>
            Positive X face in the cube map.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX">
            <summary>
            Negative X face in the cube map.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveY">
            <summary>
            Positive Y face in the cube map.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeY">
            <summary>
            Negative Y face in the cube map.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveZ">
            <summary>
            Positive Z face in the cube map.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeZ">
            <summary>
            Negative Z face in the cube map.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.UseReferenceDevice">
            <summary>
            Used to request creation of the reference graphics device, 
            or the default hardware accelerated device (when set to false).
            </summary>
            <remarks>
            This only works on DirectX platforms where a reference graphics
            device is available and must be defined before the graphics device
            is created. It defaults to false.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsWideScreen">
            <summary>
            Returns true if the <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode"/> is widescreen.
            </summary>
            <remarks>
            Common widescreen modes include 16:9, 16:10 and 2:1.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.QueryRenderTargetFormat(Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat@,Microsoft.Xna.Framework.Graphics.DepthFormat@,System.Int32@)">
            <summary>
            Queries for support of the requested render target format on the adaptor.
            </summary>
            <param name="graphicsProfile">The graphics profile.</param>
            <param name="format">The requested surface format.</param>
            <param name="depthFormat">The requested depth stencil format.</param>
            <param name="multiSampleCount">The requested multisample count.</param>
            <param name="selectedFormat">Set to the best format supported by the adaptor for the requested surface format.</param>
            <param name="selectedDepthFormat">Set to the best format supported by the adaptor for the requested depth stencil format.</param>
            <param name="selectedMultiSampleCount">Set to the best count supported by the adaptor for the requested multisample count.</param>
            <returns>True if the requested format is supported by the adaptor. False if one or more of the values was changed.</returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsContext.Metrics">
            <summary>
            The rendering information for debugging and profiling.
            The metrics are reset every frame after draw within <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsContext.DiscardColor">
            <summary>
            Get or set the color a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> is cleared to when it is set.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsContext.GraphicsDebug">
            <summary>
            Access debugging APIs for the graphics subsystem.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.GetRenderTargets">
            <summary>
            Retrieves the currently bound render targets as an array.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding"/> representing the current render targets.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.GetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])">
            <summary>
            Copies the currently bound render targets into the provided array.
            </summary>
            <param name="bindings">The array to store the current render targets.
            GraphicsProfile.Reach supports a maximum of 1 simultaneous rendertargets.
            GraphicsProfile.HiDef supports a maximum of 4 simultaneous rendertargets.
            GraphicsProfile.FL10_0 supports a maximum of 8 simultaneous rendertargets.
            </param>
            <returns>The number of render targets copied.</returns>
            <remarks>This is a MonoGame extension</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Int32)">
            <remarks>Only implemented for DirectX </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget3D,System.Int32)">
            <remarks>Only implemented for DirectX </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw geometry by indexing into the vertex buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">A hint of the lowest vertex indexed relative to baseVertex.</param>
            <param name="minVertexIndex">A hint of the maximum vertex indexed.</param>
            <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw geometry by indexing into the vertex buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type from the data in an array of vertices without indexing.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type from the data in the given array of vertices without indexing.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type from the currently bound vertexbuffers without indexing.
            </summary>
            <param name="primitiveType">The type of primitives to draw.</param>
            <param name="vertexStart">Index of the vertex to start at.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
            <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="baseInstance">Used to offset the instance range indexed from the instance buffer.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsContext.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDebug.TryDequeueMessage(Microsoft.Xna.Framework.Graphics.GraphicsDebugMessage@)">
            <summary>
            Attempt to dequeue a debugging message from the graphics subsystem.
            </summary>
            <remarks>
            When running on a graphics device with debugging enabled, this allows you to retrieve
            subsystem-specific (e.g. DirectX, OpenGL, etc.) debugging messages including information
            about improper usage of shaders and APIs.
            </remarks>
            <param name="message">The graphics debugging message if retrieved, null otherwise.</param>
            <returns>True if a graphics debugging message was retrieved, false otherwise.</returns>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Disposing">
            <summary>
            Raised when the GraphicsDevice is disposed or finalized.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.UseHalfPixelOffset">
            <summary>
            Indicates if DX9 style pixel addressing or current standard
            pixel addressing should be used. This flag is set to
            <c>false</c> by default. If `UseHalfPixelOffset` is
            `true` you have to add half-pixel offset to a Projection matrix.
            See also <see cref="!:GraphicsDeviceManager.PreferHalfPixelOffset"/>.
            </summary>
            <remarks>
            XNA uses DirectX9 for its graphics. DirectX9 interprets UV
            coordinates differently from other graphics API's. This is
            typically referred to as the half-pixel offset. MonoGame
            replicates XNA behavior if this flag is set to <c>true</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Metrics">
            <summary>
            The rendering information for debugging and profiling.
            The metrics are reset every frame after draw within <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDebug">
            <summary>
            Access debugging APIs for the graphics subsystem.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsProfile,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="adapter">The graphics adapter.</param>
            <param name="graphicsProfile">The graphics profile.</param>
            <param name="presentationParameters">The presentation options.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="presentationParameters"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.GraphicsProfile,System.Boolean,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice" /> class.
            </summary>
            <param name="adapter">The graphics adapter.</param>
            <param name="graphicsProfile">The graphics profile.</param>
            <param name="preferHalfPixelOffset"> Indicates if DX9 style pixel addressing or current standard pixel addressing should be used. This value is passed to <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.UseHalfPixelOffset"/></param>
            <param name="presentationParameters">The presentation options.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="presentationParameters"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BlendFactor">
            <summary>
            The color used as blend factor when alpha blending.
            </summary>
            <remarks>
            When only changing BlendFactor, use this rather than <see cref="P:Microsoft.Xna.Framework.Graphics.BlendState.BlendFactor"/> to
            only update BlendFactor so the whole BlendState does not have to be updated.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DiscardColor">
            <summary>
            Get or set the color a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> is cleared to when it is set.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget2D,System.Int32)">
            <remarks>Only implemented for DirectX </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(Microsoft.Xna.Framework.Graphics.RenderTarget3D,System.Int32)">
            <remarks>Only implemented for DirectX </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTargets">
            <summary>
            Retrieves the currently bound render targets as an array.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetBinding"/> representing the current render targets.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTargets(Microsoft.Xna.Framework.Graphics.RenderTargetBinding[])">
            <summary>
            Copies the currently bound render targets into the provided array.
            </summary>
            <param name="bindings">The array to store the current render targets.
            Reach profile supports a maximum of 1 simultaneous rendertargets.
            HiDef profile supports a maximum of 4 simultaneous rendertargets.
            FL10_0 profile supports a maximum of 8 simultaneous rendertargets.
            </param>
            <returns>The number of render targets copied.</returns>
            <remarks>This is a MonoGame extension</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw geometry by indexing into the vertex buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
            <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
            <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw geometry by indexing into the vertex buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives to render from the index buffer.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type from the data in an array of vertices without indexing.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type from the data in the given array of vertices without indexing.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex that should be rendered.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type from the currently bound vertexbuffers without indexing.
            </summary>
            <param name="primitiveType">The type of primitives to draw.</param>
            <param name="vertexStart">Index of the vertex to start at.</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int16[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 16-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <remarks>The <see cref="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration"/> will be found by getting <see cref="P:Microsoft.Xna.Framework.Graphics.IVertexType.VertexDeclaration"/>
            from an instance of <typeparamref name="T"/> and cached for subsequent calls.</remarks>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example a value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,``0[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
            <summary>
            Draw primitives of the specified type by indexing into the given array of vertices with 32-bit indices.
            </summary>
            <typeparam name="T">The type of the vertices.</typeparam>
            <param name="primitiveType">The type of primitives to draw with the vertices.</param>
            <param name="vertexData">An array of vertices to draw.</param>
            <param name="vertexOffset">The index in the array of the first vertex to draw.</param>
            <param name="indexOffset">The index in the array of indices of the first index to use</param>
            <param name="primitiveCount">The number of primitives to draw.</param>
            <param name="numVertices">The number of vertices to draw.</param>
            <param name="indexData">The index data.</param>
            <param name="vertexDeclaration">The layout of the vertices.</param>
            <remarks>All indices in the vertex buffer are interpreted relative to the specified <paramref name="vertexOffset"/>.
            For example value of zero in the array of indices points to the vertex at index <paramref name="vertexOffset"/>
            in the array of vertices.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="minVertexIndex">This is unused and remains here only for XNA API compatibility.</param>
            <param name="numVertices">This is unused and remains here only for XNA API compatibility.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Note that minVertexIndex and numVertices are unused in MonoGame and will be ignored.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawInstancedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw instanced geometry from the bound vertex buffers and index buffer.
            </summary>
            <param name="primitiveType">The type of primitives in the index buffer.</param>
            <param name="baseVertex">Used to offset the vertex range indexed from the vertex buffer.</param>
            <param name="startIndex">The index within the index buffer to start drawing from.</param>
            <param name="primitiveCount">The number of primitives in a single instance.</param>
            <param name="baseInstance">Used to offset the instance range indexed from the instance buffer.</param>
            <param name="instanceCount">The number of instances to render.</param>
            <remarks>Draw geometry with data from multiple bound vertex streams at different frequencies.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Flush">
            <summary>
            Sends queued-up commands in the command buffer to the graphics processing unit (GPU).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetBackBufferData``1(``0[])">
            <summary>
            Gets the Pixel data of what is currently drawn on screen.
            The format is whatever the current format of the backbuffer is.
            </summary>
            <typeparam name="T">A byte[] of size (ViewPort.Width * ViewPort.Height * 4)</typeparam>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
            <summary>
            Describes the status of the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Normal">
            <summary>
            The device is normal.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.Lost">
            <summary>
            The device has been lost.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus.NotReset">
            <summary>
            The device has not been reset.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics">
            <summary>
            A snapshot of rendering statistics from <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Metrics"/> to be used for runtime debugging and profiling.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.ClearCount">
            <summary>
            Number of times Clear was called.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.DrawCount">
            <summary>
            Number of times Draw was called.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.PixelShaderCount">
            <summary>
            Number of times the pixel shader was changed on the GPU.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.PrimitiveCount">
            <summary>
            Number of rendered primitives.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.SpriteCount">
            <summary>
            Number of sprites and text characters rendered via <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.TargetCount">
            <summary>
            Number of times a target was changed on the GPU.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.TextureCount">
            <summary>
            Number of times a texture was changed on the GPU.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.VertexShaderCount">
            <summary>
            Number of times the vertex shader was changed on the GPU.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.op_Subtraction(Microsoft.Xna.Framework.Graphics.GraphicsMetrics,Microsoft.Xna.Framework.Graphics.GraphicsMetrics)">
            <summary>
            Returns the difference between two sets of metrics.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics"/> on the left of the sub sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics"/> on the right of the sub sign.</param>
            <returns>Difference between two sets of metrics.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsMetrics.op_Addition(Microsoft.Xna.Framework.Graphics.GraphicsMetrics,Microsoft.Xna.Framework.Graphics.GraphicsMetrics)">
            <summary>
            Returns the combination of two sets of metrics.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics"/> on the left of the add sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsMetrics"/> on the right of the add sign.</param>
            <returns>Combination of two sets of metrics.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile">
            <summary>
            Defines a set of graphic capabilities.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.Reach">
            <summary>
            Use a limited set of graphic features and capabilities, allowing the game to support the widest variety of devices.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsProfile.HiDef">
            <summary>
            Use the largest available set of graphic features and capabilities to target devices, that have more enhanced graphic capabilities.        
            </summary>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsResource.Disposing">
            <summary>
            Raised when the GraphicsResource is disposed or finalized.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.GraphicsContextLost">
            <summary>
            Called before the device is reset. Allows graphics resources to 
            invalidate their state so they can be recreated after the device reset.
            Warning: This may be called after a call to Dispose() up until
            the resource is garbage collected.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsResource.Dispose(System.Boolean)">
            <summary>
            The method that derived classes should override to implement disposing of managed and native resources.
            </summary>
            <param name="disposing">True if managed objects should be disposed.</param>
            <remarks>Native resources should always be released regardless of the value of the disposing parameter.</remarks>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService">
            <summary>
            Provider of a <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice">
            <summary>
            The provided <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated">
            <summary>
            Raised when a new <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> has been created.
            </summary>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing">
            <summary>
            Raised when the <see cref="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice"/> is disposed.
            </summary>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset">
            <summary>
            Raised when the <see cref="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice"/> has reset.
            </summary>
            <seealso cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset"/>
        </member>
        <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting">
            <summary>
            Raised before the <see cref="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice"/> is resetting.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Model">
            <summary>
            A basic 3D model with per mesh parent bones.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Bones">
            <summary>
            A collection of <see cref="T:Microsoft.Xna.Framework.Graphics.ModelBone"/> objects which describe how each mesh in the
            mesh collection for this model relates to its parent mesh.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Meshes">
            <summary>
            A collection of <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMesh"/> objects which compose the model. Each <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMesh"/>
            in a model may be moved independently and may be composed of multiple materials
            identified as <see cref="T:Microsoft.Xna.Framework.Graphics.ModelMeshPart"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Root">
            <summary>
            Root bone for this model.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Model.Tag">
            <summary>
            Custom attached object.
            <remarks>
            Skinning data is example of attached object for model.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.#ctor(System.Collections.Generic.List{Microsoft.Xna.Framework.Graphics.ModelBone},System.Collections.Generic.List{Microsoft.Xna.Framework.Graphics.ModelMesh})">
            <summary>
            Constructs a model. 
            </summary>
            <param name="graphicsDevice">A valid reference to <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.</param>
            <param name="bones">The collection of bones.</param>
            <param name="meshes">The collection of meshes.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bones"/> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="meshes"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws the model meshes.
            </summary>
            <param name="world">The world transform.</param>
            <param name="view">The view transform.</param>
            <param name="projection">The projection transform.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies bone transforms relative to all parent bones of the each bone from this model to a given array.
            </summary>
            <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsFrom(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies bone transforms relative to <see cref="P:Microsoft.Xna.Framework.Graphics.Model.Root"/> bone from a given array to this model.
            </summary>
            <param name="sourceBoneTransforms">The array of prepared bone transform data.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceBoneTransforms"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceBoneTransforms"/> is invalid.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Model.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies bone transforms relative to <see cref="P:Microsoft.Xna.Framework.Graphics.Model.Root"/> bone from this model to a given array.
            </summary>
            <param name="destinationBoneTransforms">The array receiving the transformed bones.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destinationBoneTransforms"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="destinationBoneTransforms"/> is invalid.
            </exception>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection">
            <summary>
            Represents a set of bones associated with a model.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Item(System.String)">
            <summary>
            Retrieves a ModelBone from the collection, given the name of the bone.
            </summary>
            <param name="boneName">The name of the bone to retrieve.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelBone@)">
            <summary>
            Finds a bone with a given name if it exists in the collection.
            </summary>
            <param name="boneName">The name of the bone to find.</param>
            <param name="value">The bone named boneName, if found.</param>
            <returns>true if the bone was found</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.GetEnumerator">
            <summary>
            Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator">
            <summary>
            Provides the ability to iterate through the bones in an ModelMeshCollection.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Current">
            <summary>
            Gets the current element in the ModelMeshCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the ModelMeshCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.Dispose">
            <summary>
            Immediately releases the unmanaged resources used by this object.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection">
            <summary>
            Represents a collection of ModelMesh objects.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Item(System.String)">
            <summary>
            Retrieves a ModelMesh from the collection, given the name of the mesh.
            </summary>
            <param name="meshName">The name of the mesh to retrieve.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.TryGetValue(System.String,Microsoft.Xna.Framework.Graphics.ModelMesh@)">
            <summary>
            Finds a mesh with a given name if it exists in the collection.
            </summary>
            <param name="meshName">The name of the mesh to find.</param>
            <param name="value">The mesh named meshName, if found.</param>
            <returns>true if a mesh was found</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.GetEnumerator">
            <summary>
            Returns a ModelMeshCollection.Enumerator that can iterate through a ModelMeshCollection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator">
            <summary>
            Provides the ability to iterate through the bones in an ModelMeshCollection.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Current">
            <summary>
            Gets the current element in the ModelMeshCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the ModelMeshCollection.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Dispose">
            <summary>
            Immediately releases the unmanaged resources used by this object.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.Reset">
            <remarks>This is a MonoGame extension</remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete">
            <summary>
            Gets a value indicating whether the occlusion query has completed.
            </summary>
            <value>
            <see langword="true"/> if the occlusion query has completed; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.PixelCount">
            <summary>
            Gets the number of visible pixels.
            </summary>
            <value>The number of visible pixels.</value>
            <exception cref="T:System.InvalidOperationException">
            The occlusion query has not yet completed. Check <see cref="P:Microsoft.Xna.Framework.Graphics.OcclusionQuery.IsComplete"/> before reading
            the result!
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.OcclusionQuery"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="graphicsDevice"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The current graphics profile does not support occlusion queries.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin">
            <summary>
            Begins the occlusion query.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin"/> is called again before calling <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End">
            <summary>
            Ends the occlusion query.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.End"/> is called before calling <see cref="M:Microsoft.Xna.Framework.Graphics.OcclusionQuery.Begin"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.#ctor">
            <summary>
            Create a <see cref="T:Microsoft.Xna.Framework.Graphics.PresentationParameters"/> instance with default values for all properties.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
            <summary>
            Get or set the format of the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
            <summary>
            Get or set the height of the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
            <summary>
            Get or set the width of the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.Bounds">
            <summary>
            Get the bounds of the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DeviceWindowHandle">
            <summary>
            Get or set the handle of the window that will present the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DepthStencilFormat">
            <summary>
            Get or set the depth stencil format for the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.IsFullScreen">
            <summary>
            Get or set a value indicating if we are in full screen mode.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.HardwareModeSwitch">
            <summary>
            If <code>true</code> the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> will do a mode switch
            when going to full screen mode. If <code>false</code> it will instead do a
            soft full screen by maximizing the window and making it borderless.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleCount">
            <summary>
            Get or set the multisample count for the back buffer.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentationInterval">
            <summary>
            Get or set the presentation interval.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DisplayOrientation">
            <summary>
            Get or set the display orientation.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.RenderTargetUsage">
            <summary>
            Get or set the RenderTargetUsage for the back buffer.
            Determines if the back buffer is cleared when it is set as the
            render target by the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/> target.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.UseDebugLayers">
            <summary>
            Used to request the graphics device should be created
            with debugging features enabled.
            </summary>
            <remarks>Usable only on DirectX platforms.</remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.UseDriverType">
            <summary>
            Used to request creation of a specific kind of driver.
            </summary>
            <remarks>
            These values only work on DirectX platforms and must be defined before the graphics device
            is created. <see cref="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType.Hardware"/> by default.
            </remarks>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType">
            <summary>
            Defines the driver type for graphics adapter.
            </summary>
            <remarks>Usable only on DirectX platforms.</remarks>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType.Hardware">
            <summary>
            Hardware device been used for rendering. Maximum speed and performance.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType.Reference">
            <summary>
            Emulates the hardware device on CPU. Slowly, only for testing.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType.FastSoftware">
            <summary>
            Useful when <see cref="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DriverType.Hardware"/> acceleration does not work.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clone">
            <summary>
            Create a copy of this <see cref="T:Microsoft.Xna.Framework.Graphics.PresentationParameters"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
            <summary>
            Defines how <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present"/> updates the game window.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Default">
            <summary>
            Equivalent to <see cref="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.One">
            <summary>
            The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than the screen refresh rate.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Two">
            <summary>
            The driver waits for the vertical retrace period, before updating window client area. Present operations are not affected more frequently than every second screen refresh. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.PresentInterval.Immediate">
            <summary>
            The driver updates the window client area immediately. Present operations might be affected immediately. There is no limit for framerate.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube">
            <summary>
            Represents a texture cube that can be used as a render target.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.DepthStencilFormat">
            <summary>
            Gets the depth-stencil buffer format of this render target.
            </summary>
            <value>The format of the depth-stencil buffer.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.MultiSampleCount">
            <summary>
            Gets the number of multisample locations.
            </summary>
            <value>The number of multisample locations.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.RenderTargetUsage">
            <summary>
            Gets the usage mode of this render target.
            </summary>
            <value>The usage mode of the render target.</value>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.Microsoft#Xna#Platform#Graphics#IRenderTarget#Width">
            <inheritdoc/>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.RenderTargetCube.Microsoft#Xna#Platform#Graphics#IRenderTarget#Height">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="size">The width and height of a texture cube face in pixels.</param>
            <param name="mipMap"><see langword="true"/> to generate a full mipMap chain; otherwise <see langword="false"/>.</param>
            <param name="preferredFormat">The preferred format of the surface.</param>
            <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.RenderTargetCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTargetCube"/> class.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <param name="size">The width and height of a texture cube face in pixels.</param>
            <param name="mipMap"><see langword="true"/> to generate a full mipMap chain; otherwise <see langword="false"/>.</param>
            <param name="preferredFormat">The preferred format of the surface.</param>
            <param name="preferredDepthFormat">The preferred format of the depth-stencil buffer.</param>
            <param name="preferredMultiSampleCount">The preferred number of multisample locations.</param>
            <param name="usage">The usage mode of the render target.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.RenderTargetUsage">
            <summary>
            Defines if the previous content in a render target is preserved when it set on the graphics device.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents">
            <summary>
            The render target content will not be preserved.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PreserveContents">
            <summary>
            The render target content will be preserved even if it is slow or requires extra memory.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.RenderTargetUsage.PlatformContents">
            <summary>
            The render target content might be preserved if the platform can do so without a penalty in performance or memory usage.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
            <summary>
            The newly created resource object.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
            <summary>
            The name of the destroyed resource.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
            <summary>
            The resource manager tag of the destroyed resource.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
            <summary>
            Defines how vertex or index buffer data will be flushed during a SetData operation.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.None">
            <summary>
            The SetData can overwrite the portions of existing data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.Discard">
            <summary>
            The SetData will discard the entire buffer. A pointer to a new memory area is returned and rendering from the previous area do not stall.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SetDataOptions.NoOverwrite">
            <summary>
            The SetData operation will not overwrite existing data. This allows the driver to return immediately from a SetData operation and continue rendering.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
            <summary>
            Helper class for drawing text strings and sprites in one or more optimized batches.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, which will be used for sprite rendering.</param>        
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="graphicsDevice"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Constructs a <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
            <param name="graphicsDevice">The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>, which will be used for sprite rendering.</param>
            <param name="capacity">The initial capacity of the internal array holding batch items (the value will be rounded to the next multiple of 64).</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="graphicsDevice"/> is null.</exception>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Begins a new sprite and text batch with the specified render state.
            </summary>
            <param name="sortMode">The drawing order for sprite and text drawing. <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred"/> by default.</param>
            <param name="blendState">State of the blending. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.BlendState.AlphaBlend"/> if null.</param>
            <param name="samplerState">State of the sampler. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.SamplerState.LinearClamp"/> if null.</param>
            <param name="depthStencilState">State of the depth-stencil buffer. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.DepthStencilState.None"/> if null.</param>
            <param name="rasterizerState">State of the rasterization. Uses <see cref="F:Microsoft.Xna.Framework.Graphics.RasterizerState.CullCounterClockwise"/> if null.</param>
            <param name="effect">A custom <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/> to override the default sprite effect. Uses default sprite effect if null.</param>
            <param name="transformMatrix">An optional matrix used to transform the sprite geometry. Uses <see cref="P:Microsoft.Xna.Framework.Matrix.Identity"/> if null.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/> is called next time without previous <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/>.</exception>
            <remarks>This method uses optional parameters.</remarks>
            <remarks>The <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/> Begin should be called before drawing commands, and you cannot call it again before subsequent <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/>.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
            <summary>
            Flushes all batched text and sprites to the screen.
            </summary>
            <remarks>This command should be called after <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect,System.Nullable{Microsoft.Xna.Framework.Matrix})"/> and drawing commands.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this sprite.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this sprite.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this sprite.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this sprite.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this sprite.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this sprite.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this sprite.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this sprite.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this sprite.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">The drawing bounds on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this sprite.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this sprite.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">The drawing bounds on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this sprite.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this sprite.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">The drawing bounds on screen.</param>
            <param name="sourceRectangle">An optional region on the texture which will be rendered. If null - draws full texture.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a sprite for drawing in the current batch.
            </summary>
            <param name="texture">A texture.</param>
            <param name="destinationRectangle">The drawing bounds on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Boolean)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
            <param name="rtl">Text is Right to Left.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Boolean)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
            <param name="rtl">Text is Right to Left.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.DrawString(Microsoft.Xna.Framework.Graphics.SpriteFont,System.Text.StringBuilder,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Complex,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single,System.Boolean)">
            <summary>
            Submit a text string of sprites for drawing in the current batch.
            </summary>
            <param name="spriteFont">A font.</param>
            <param name="text">The text which will be drawn.</param>
            <param name="position">The drawing location on screen.</param>
            <param name="color">A color mask.</param>
            <param name="rotation">A rotation of this string.</param>
            <param name="origin">Center of the rotation. 0,0 by default.</param>
            <param name="scale">A scaling of this string.</param>
            <param name="effects">Modificators for drawing. Can be combined.</param>
            <param name="layerDepth">A depth of the layer of this string.</param>
            <param name="rtl">Text is Right to Left.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
            <summary>
            Immediately releases the unmanaged resources used by this object.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
            <summary>
            Defines sprite visual options for mirroring.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.None">
            <summary>
            No options specified.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Render the sprite reversed along the X axis.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Render the sprite reversed along the Y axis.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.InternalGlyphs">
            <remarks>SpriteBatcher need direct accest to the Glyph array</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Collections.Generic.List{Microsoft.Xna.Framework.Rectangle},System.Collections.Generic.List{Microsoft.Xna.Framework.Rectangle},System.Collections.Generic.List{System.Char},System.Int32,System.Single,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector3},System.Nullable{System.Char})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont" /> class.
            </summary>
            <param name="texture">The font texture.</param>
            <param name="glyphBounds">The rectangles in the font texture containing letters.</param>
            <param name="cropping">The cropping rectangles, which are applied to the corresponding glyphBounds to calculate the bounds of the actual character.</param>
            <param name="characters">The characters.</param>
            <param name="lineSpacing">The line spacing (the distance from baseline to baseline) of the font.</param>
            <param name="spacing">The spacing (tracking) between characters in the font.</param>
            <param name="kerning">The letters kernings (X - left side bearing, Y - width and Z - right side bearing).</param>
            <param name="defaultCharacter">The character that will be substituted when a given character is not included in the font.</param>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Texture">
            <summary>
            Gets the texture that this SpriteFont draws from.
            </summary>
            <remarks>Can be used to implement custom rendering of a SpriteFont</remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Characters">
            <summary>
            Gets a collection of the characters in the font.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyphs">
             <summary>
             The glyphs in this SpriteFont.
             </summary>
            
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.DefaultCharacter">
            <summary>
            Gets or sets the character that will be substituted when a
            given character is not included in the font.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.LineSpacing">
            <summary>
            Gets or sets the line spacing (the distance from baseline
            to baseline) of the font.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.SpriteFont.Spacing">
            <summary>
            Gets or sets the spacing (tracking) between characters in
            the font.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.String)">
            <summary>
            Returns the size of a string when rendered in this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size, in pixels, of 'text' when rendered in
            this font.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.SpriteFont.MeasureString(System.Text.StringBuilder)">
            <summary>
            Returns the size of the contents of a StringBuilder when
            rendered in this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size, in pixels, of 'text' when rendered in
            this font.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph">
            <summary>
            Struct that defines the spacing, Kerning, and bounds of a character.
            </summary>
            <remarks>Provides the data necessary to implement custom SpriteFont rendering.</remarks>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.BoundsInTexture">
            <summary>
            Rectangle in the font texture where this letter exists.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.Cropping">
            <summary>
            Cropping applied to the BoundsInTexture to calculate the bounds of the actual character.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.LeftSideBearing">
            <summary>
            The amount of space between the left side of the character and its first pixel in the X dimension.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.RightSideBearing">
            <summary>
            The amount of space between the right side of the character and its last pixel in the X dimension.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.Width">
            <summary>
            Width of the character before kerning is applied. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteFont.Glyph.WidthIncludingBearings">
            <summary>
            Width of the character before kerning is applied. 
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode">
            <summary>
            Defines sprite sort rendering options.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred">
            <summary>
            All sprites are drawing when <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/> invokes, in order of draw call sequence. Depth is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Immediate">
            <summary>
            Each sprite is drawing at individual draw call, instead of <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End"/>. Depth is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture">
            <summary>
            Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred"/>, except sprites are sorted by texture prior to drawing. Depth is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.BackToFront">
            <summary>
            Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred"/>, except sprites are sorted by depth in back-to-front order prior to drawing.
            An unstable sort is used, which means sprites with equal depth may not have their order preserved.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.FrontToBack">
            <summary>
            Same as <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred"/>, except sprites are sorted by depth in front-to-back order prior to drawing.
            An unstable sort is used, which means sprites with equal depth may not have their order preserved.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
            <summary>
            Defines types of surface formats.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color">
            <summary>
            Unsigned 32-bit ARGB pixel format for store 8 bits per channel. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr565">
            <summary>
            Unsigned 16-bit BGR pixel format for store 5 bits for blue, 6 bits for green, and 5 bits for red.   
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra5551">
            <summary>
            Unsigned 16-bit BGRA pixel format where 5 bits reserved for each color and last bit is reserved for alpha.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra4444">
            <summary>
            Unsigned 16-bit BGRA pixel format for store 4 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1">
            <summary>
            DXT1. Texture format with compression. Surface dimensions must be a multiple 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3">
            <summary>
            DXT3. Texture format with compression. Surface dimensions must be a multiple 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5">
            <summary>
            DXT5. Texture format with compression. Surface dimensions must be a multiple 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte2">
            <summary>
            Signed 16-bit bump-map format for store 8 bits for <c>u</c> and <c>v</c> data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.NormalizedByte4">
            <summary>
            Signed 32-bit bump-map format for store 8 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba1010102">
            <summary>
            Unsigned 32-bit RGBA pixel format for store 10 bits for each color and 2 bits for alpha.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rg32">
            <summary>
            Unsigned 32-bit RG pixel format using 16 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba64">
            <summary>
            Unsigned 64-bit RGBA pixel format using 16 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Alpha8">
            <summary>
            Unsigned A 8-bit format for store 8 bits to alpha channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Single">
            <summary>
            IEEE 32-bit R float format for store 32 bits to red channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector2">
            <summary>
            IEEE 64-bit RG float format for store 32 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Vector4">
            <summary>
            IEEE 128-bit RGBA float format for store 32 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfSingle">
            <summary>
            Float 16-bit R format for store 16 bits to red channel.   
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector2">
            <summary>
            Float 32-bit RG format for store 16 bits per channel. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HalfVector4">
            <summary>
            Float 64-bit ARGB format for store 16 bits per channel. 
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.HdrBlendable">
            <summary>
            Float pixel format for high dynamic range data.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32">
            <summary>
            For compatibility with WPF D3DImage.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra32">
            <summary>
            For compatibility with WPF D3DImage.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.ColorSRgb">
            <summary>
            Unsigned 32-bit RGBA sRGB pixel format that supports 8 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32SRgb">
            <summary>
            Unsigned 32-bit sRGB pixel format that supports 8 bits per channel. 8 bits are unused.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgra32SRgb">
            <summary>
            Unsigned 32-bit sRGB pixel format that supports 8 bits per channel.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1SRgb">
            <summary>
            DXT1. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3SRgb">
            <summary>
            DXT3. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5SRgb">
            <summary>
            DXT5. sRGB texture format with compression. Surface dimensions must be a multiple of 4.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbPvrtc2Bpp">
            <summary>
            PowerVR texture compression format (iOS and Android).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbPvrtc4Bpp">
            <summary>
            PowerVR texture compression format (iOS and Android).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaPvrtc2Bpp">
            <summary>
            PowerVR texture compression format (iOS and Android).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaPvrtc4Bpp">
            <summary>
            PowerVR texture compression format (iOS and Android).
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbEtc1">
            <summary>
            Ericcson Texture Compression (Android)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1a">
            <summary>
            DXT1 version where 1-bit alpha is used.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaAtcExplicitAlpha">
            <summary>
            ATC/ATITC compression (Android)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.RgbaAtcInterpolatedAlpha">
            <summary>
            ATC/ATITC compression (Android)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgb8Etc2">
            <summary>
            Etc2 RGB8 (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Srgb8Etc2">
            <summary>
            Etc2 SRGB8 (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgb8A1Etc2">
            <summary>
            Etc2 RGB8A1 (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Srgb8A1Etc2">
            <summary>
            Etc2 SRGB8A1 (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.Rgba8Etc2">
            <summary>
            Etc2 RGBA8 EAC (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.SRgb8A8Etc2">
            <summary>
            Etc2 SRGB8A8 EAC (Android/iOS withh OpenglES 3.0)
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.Graphics.SurfaceFormat.ColorSRgba">
            <summary>
            Unsigned 32-bit RGBA sRGBA pixel format that supports 8 bits per channel.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture.SortingKey">
            <summary>
            Gets a unique identifier of this texture for sorting purposes.
            </summary>
            <remarks>
            <para>For example, this value is used by <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> when drawing with <see cref="F:Microsoft.Xna.Framework.Graphics.SpriteSortMode.Texture"/>.</para>
            <para>The value is an implementation detail and may change between application launches or MonoGame versions.
            It is only guaranteed to stay consistent during application lifetime.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
            <summary>
            Gets the width of the texture in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
            <summary>
            Gets the height of the texture in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Bounds">
            <summary>
            Gets the dimensions of the texture
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Creates a new texture of the given size
            </summary>
            <param name="graphicsDevice"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Creates a new texture of a given size with a surface format and optional mipmaps 
            </summary>
            <param name="graphicsDevice"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mipMap"></param>
            <param name="format"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Int32)">
            <summary>
            Creates a new texture array of a given size with a surface format and optional mipmaps.
            Throws ArgumentException if the current GraphicsDevice can't work with texture arrays
            </summary>
            <param name="graphicsDevice"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="mipMap"></param>
            <param name="format"></param>
            <param name="arraySize"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetSharedHandle">
            <summary>
            Gets the handle to a shared resource.
            </summary>
            <returns>
            The handle of the shared resource, or <see cref="F:System.IntPtr.Zero"/> if the texture was not
            created as a shared resource.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
            <summary>
            Changes the pixels of the texture
            Throws ArgumentNullException if data is null
            Throws ArgumentException if arraySlice is greater than 0, and the GraphicsDevice does not support texture arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="level">Layer of the texture to modify</param>
            <param name="arraySlice">Index inside the texture array</param>
            <param name="rect">Area to modify</param>
            <param name="data">New data for the texture</param>
            <param name="startIndex">Start position of data</param>
            <param name="elementCount"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
            <summary>
            Changes the pixels of the texture
            </summary>
            <typeparam name="T"></typeparam>
            <param name="level">Layer of the texture to modify</param>
            <param name="rect">Area to modify</param>
            <param name="data">New data for the texture</param>
            <param name="startIndex">Start position of data</param>
            <param name="elementCount"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Changes the texture's pixels
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">New data for the texture</param>
            <param name="startIndex">Start position of data</param>
            <param name="elementCount"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(``0[])">
            <summary>
            Changes the texture's pixels
            </summary>
            <typeparam name="T">New data for the texture</typeparam>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves the contents of the texture
            Throws ArgumentException if data is null, data.length is too short or
            if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="level">Layer of the texture</param>
            <param name="arraySlice">Index inside the texture array</param>
            <param name="rect">Area of the texture to retrieve</param>
            <param name="data">Destination array for the data</param>
            <param name="startIndex">Starting index of data where to write the pixel data</param>
            <param name="elementCount">Number of pixels to read</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable{Microsoft.Xna.Framework.Rectangle},``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves the contents of the texture
            Throws ArgumentException if data is null, data.length is too short or
            if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="level">Layer of the texture</param>
            <param name="rect">Area of the texture</param>
            <param name="data">Destination array for the texture data</param>
            <param name="startIndex">First position in data where to write the pixel data</param>
            <param name="elementCount">Number of pixels to read</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves the contents of the texture
            Throws ArgumentException if data is null, data.length is too short or
            if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">Destination array for the texture data</param>
            <param name="startIndex">First position in data where to write the pixel data</param>
            <param name="elementCount">Number of pixels to read</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(``0[])">
            <summary>
            Retrieves the contents of the texture
            Throws ArgumentException if data is null, data.length is too short or
            if arraySlice is greater than 0 and the GraphicsDevice doesn't support texture arrays
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">Destination array for the texture data</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromStream(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> from a stream, supported formats bmp, gif, jpg, png, tif and dds (only for simple textures).
            May work with other formats, but will not work with tga files.
            </summary>
            <param name="graphicsDevice">The graphics device to use to create the texture.</param>
            <param name="stream">The stream from which to read the image data.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> created from the image stream.</returns>
            <remarks>Note that different image decoders may generate slight differences between platforms, but perceptually 
            the images should be identical.  This call does not premultiply the image alpha, but areas of zero alpha will
            result in black color data.
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsJpeg(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Converts the texture to a JPG image
            </summary>
            <param name="stream">Destination for the image</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SaveAsPng(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Converts the texture to a PNG image
            </summary>
            <param name="stream">Destination for the image</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Gets a copy of 3D texture data, specifying a mipMap level, source box, start index, and number of elements.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="level">MipMap level.</param>
            <param name="left">Position of the left side of the box on the x-axis.</param>
            <param name="top">Position of the top of the box on the y-axis.</param>
            <param name="right">Position of the right side of the box on the x-axis.</param>
            <param name="bottom">Position of the bottom of the box on the y-axis.</param>
            <param name="front">Position of the front of the box on the z-axis.</param>
            <param name="back">Position of the back of the box on the z-axis.</param>
            <param name="data">Array of data.</param>
            <param name="startIndex">Index of the first element to get.</param>
            <param name="elementCount">Number of elements to get.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Gets a copy of 3D texture data, specifying a start index and number of elements.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="data">Array of data.</param>
            <param name="startIndex">Index of the first element to get.</param>
            <param name="elementCount">Number of elements to get.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(``0[])">
            <summary>
            Gets a copy of 3D texture data.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="data">Array of data.</param>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Size">
            <summary>
            Gets the width and height of the cube map face in pixels.
            </summary>
            <value>The width and height of a cube map face in pixels.</value>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,``0[])">
            <summary>
            Gets a copy of cube texture data specifying a cubemap face.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cubeMapFace">The cube map face.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
            <summary>
            Describes the view bounds for render-target surface.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
            <summary>
            The height of the bounds in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
            <summary>
            The upper limit of depth of this viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
            <summary>
            The lower limit of depth of this viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
            <summary>
            The width of the bounds in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
            <summary>
            The y coordinate of the beginning of this viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
            <summary>
            The x coordinate of the beginning of this viewport.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>, which is width / height. 
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Bounds">
            <summary>
            Gets or sets a boundary of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.TitleSafeArea">
            <summary>
            Returns the subset of the viewport that is guaranteed to be visible on a lower quality display.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Constructs a viewport from the given values.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
            <param name="width">The width of the view bounds in pixels.</param>
            <param name="height">The height of the view bounds in pixels.</param>
            <param name="minDepth">The lower limit of depth.</param>
            <param name="maxDepth">The upper limit of depth.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a viewport from the given values. The <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/> will be 0.0 and <see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/> will be 1.0.
            </summary>
            <param name="x">The x coordinate of the upper-left corner of the view bounds in pixels.</param>
            <param name="y">The y coordinate of the upper-left corner of the view bounds in pixels.</param>
            <param name="width">The width of the view bounds in pixels.</param>
            <param name="height">The height of the view bounds in pixels.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.#ctor(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> struct.
            </summary>
            <param name="bounds">A <see cref="T:Microsoft.Xna.Framework.Rectangle"/> that defines the location and size of the <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> in a render target.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Projects a <see cref="T:Microsoft.Xna.Framework.Vector3"/> from model space into screen space.
            The source point is transformed from model space to world space by the world matrix,
            then from world space to view space by the view matrix, and
            finally from view space to screen space by the projection matrix.
            </summary>
            <param name="source">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to project.</param>
            <param name="projection">The projection <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="view">The view <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="world">The world <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Unprojects a <see cref="T:Microsoft.Xna.Framework.Vector3"/> from screen space into model space.
            The source point is transformed from screen space to view space by the inverse of the projection matrix,
            then from view space to world space by the inverse of the view matrix, and
            finally from world space to model space by the inverse of the world matrix.
            Note source.Z must be less than or equal to MaxDepth.
            </summary>
            <param name="source">The <see cref="T:Microsoft.Xna.Framework.Vector3"/> to unproject.</param>
            <param name="projection">The projection <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="view">The view <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <param name="world">The world <see cref="T:Microsoft.Xna.Framework.Matrix"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/> in the format:
            {X:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.X"/>] Y:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Y"/>] Width:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Width"/>] Height:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.Height"/>] MinDepth:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth"/>] MaxDepth:[<see cref="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth"/>]}
            </summary>
            <returns>A <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Graphics.Viewport"/>.</returns>
        </member>
        <member name="T:Microsoft.Xna.Framework.Color">
            <summary>
            Describes a 32-bit packed color.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PackedValue">
            <summary>
            Gets or sets packed value of this <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.UInt32)">
            <summary>
            Constructs an RGBA color from a packed value.
            The value is a 32-bit unsigned integer, with R in the least significant octet.
            </summary>
            <param name="packedValue">The packed value.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Constructs an RGBA color from the XYZW unit length components of a vector.
            </summary>
            <param name="color">A <see cref="T:Microsoft.Xna.Framework.Vector4"/> representing color.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque.
            </summary>
            <param name="color">A <see cref="T:Microsoft.Xna.Framework.Vector3"/> representing color.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Constructs an RGBA color from a <see cref="T:Microsoft.Xna.Framework.Color"/> and an alpha value.
            </summary>
            <param name="color">A <see cref="T:Microsoft.Xna.Framework.Color"/> for RGB values of new <see cref="T:Microsoft.Xna.Framework.Color"/> instance.</param>
            <param name="alpha">The alpha component value from 0 to 255.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Constructs an RGBA color from color and alpha value.
            </summary>
            <param name="color">A <see cref="T:Microsoft.Xna.Framework.Color"/> for RGB values of new <see cref="T:Microsoft.Xna.Framework.Color"/> instance.</param>
            <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
            <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an RGBA color from scalars representing red, green and blue values. Alpha value will be opaque.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
            <param name="alpha">Alpha component value from 0 to 255.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <remarks>
            This overload sets the values directly without clamping, and may therefore be faster than the other overloads.
            </remarks>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="alpha"></param>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.B">
            <summary>
            Gets or sets the blue component.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.G">
            <summary>
            Gets or sets the green component.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.R">
            <summary>
            Gets or sets the red component.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.A">
            <summary>
            Gets or sets the alpha component.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Equality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Color"/> instances are equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Color"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Color"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Inequality(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Compares whether two <see cref="T:Microsoft.Xna.Framework.Color"/> instances are not equal.
            </summary>
            <param name="left"><see cref="T:Microsoft.Xna.Framework.Color"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:Microsoft.Xna.Framework.Color"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <returns>Hash code of this <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified object.
            </summary>
            <param name="obj">The <see cref="T:Microsoft.Xna.Framework.Color"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Transparent">
            <summary>
            Transparent color (R:0,G:0,B:0,A:0).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.AliceBlue">
            <summary>
            AliceBlue color (R:240,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.AntiqueWhite">
            <summary>
            AntiqueWhite color (R:250,G:235,B:215,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Aqua">
            <summary>
            Aqua color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Aquamarine">
            <summary>
            Aquamarine color (R:127,G:255,B:212,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Azure">
            <summary>
            Azure color (R:240,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Beige">
            <summary>
            Beige color (R:245,G:245,B:220,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Bisque">
            <summary>
            Bisque color (R:255,G:228,B:196,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Black">
            <summary>
            Black color (R:0,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.BlanchedAlmond">
            <summary>
            BlanchedAlmond color (R:255,G:235,B:205,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Blue">
            <summary>
            Blue color (R:0,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.BlueViolet">
            <summary>
            BlueViolet color (R:138,G:43,B:226,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Brown">
            <summary>
            Brown color (R:165,G:42,B:42,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.BurlyWood">
            <summary>
            BurlyWood color (R:222,G:184,B:135,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.CadetBlue">
            <summary>
            CadetBlue color (R:95,G:158,B:160,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Chartreuse">
            <summary>
            Chartreuse color (R:127,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Chocolate">
            <summary>
            Chocolate color (R:210,G:105,B:30,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Coral">
            <summary>
            Coral color (R:255,G:127,B:80,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.CornflowerBlue">
            <summary>
            CornflowerBlue color (R:100,G:149,B:237,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Cornsilk">
            <summary>
            Cornsilk color (R:255,G:248,B:220,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Crimson">
            <summary>
            Crimson color (R:220,G:20,B:60,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Cyan">
            <summary>
            Cyan color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkBlue">
            <summary>
            DarkBlue color (R:0,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkCyan">
            <summary>
            DarkCyan color (R:0,G:139,B:139,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGoldenrod">
            <summary>
            DarkGoldenrod color (R:184,G:134,B:11,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGray">
            <summary>
            DarkGray color (R:169,G:169,B:169,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkGreen">
            <summary>
            DarkGreen color (R:0,G:100,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkKhaki">
            <summary>
            DarkKhaki color (R:189,G:183,B:107,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkMagenta">
            <summary>
            DarkMagenta color (R:139,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOliveGreen">
            <summary>
            DarkOliveGreen color (R:85,G:107,B:47,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOrange">
            <summary>
            DarkOrange color (R:255,G:140,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkOrchid">
            <summary>
            DarkOrchid color (R:153,G:50,B:204,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkRed">
            <summary>
            DarkRed color (R:139,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSalmon">
            <summary>
            DarkSalmon color (R:233,G:150,B:122,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSeaGreen">
            <summary>
            DarkSeaGreen color (R:143,G:188,B:139,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSlateBlue">
            <summary>
            DarkSlateBlue color (R:72,G:61,B:139,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkSlateGray">
            <summary>
            DarkSlateGray color (R:47,G:79,B:79,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkTurquoise">
            <summary>
            DarkTurquoise color (R:0,G:206,B:209,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DarkViolet">
            <summary>
            DarkViolet color (R:148,G:0,B:211,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DeepPink">
            <summary>
            DeepPink color (R:255,G:20,B:147,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DeepSkyBlue">
            <summary>
            DeepSkyBlue color (R:0,G:191,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DimGray">
            <summary>
            DimGray color (R:105,G:105,B:105,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.DodgerBlue">
            <summary>
            DodgerBlue color (R:30,G:144,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Firebrick">
            <summary>
            Firebrick color (R:178,G:34,B:34,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.FloralWhite">
            <summary>
            FloralWhite color (R:255,G:250,B:240,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.ForestGreen">
            <summary>
            ForestGreen color (R:34,G:139,B:34,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Fuchsia">
            <summary>
            Fuchsia color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gainsboro">
            <summary>
            Gainsboro color (R:220,G:220,B:220,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.GhostWhite">
            <summary>
            GhostWhite color (R:248,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gold">
            <summary>
            Gold color (R:255,G:215,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Goldenrod">
            <summary>
            Goldenrod color (R:218,G:165,B:32,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Gray">
            <summary>
            Gray color (R:128,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Green">
            <summary>
            Green color (R:0,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.GreenYellow">
            <summary>
            GreenYellow color (R:173,G:255,B:47,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Honeydew">
            <summary>
            Honeydew color (R:240,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.HotPink">
            <summary>
            HotPink color (R:255,G:105,B:180,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.IndianRed">
            <summary>
            IndianRed color (R:205,G:92,B:92,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Indigo">
            <summary>
            Indigo color (R:75,G:0,B:130,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Ivory">
            <summary>
            Ivory color (R:255,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Khaki">
            <summary>
            Khaki color (R:240,G:230,B:140,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Lavender">
            <summary>
            Lavender color (R:230,G:230,B:250,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LavenderBlush">
            <summary>
            LavenderBlush color (R:255,G:240,B:245,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LawnGreen">
            <summary>
            LawnGreen color (R:124,G:252,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LemonChiffon">
            <summary>
            LemonChiffon color (R:255,G:250,B:205,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightBlue">
            <summary>
            LightBlue color (R:173,G:216,B:230,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightCoral">
            <summary>
            LightCoral color (R:240,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightCyan">
            <summary>
            LightCyan color (R:224,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color (R:250,G:250,B:210,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGray">
            <summary>
            LightGray color (R:211,G:211,B:211,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightGreen">
            <summary>
            LightGreen color (R:144,G:238,B:144,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightPink">
            <summary>
            LightPink color (R:255,G:182,B:193,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSalmon">
            <summary>
            LightSalmon color (R:255,G:160,B:122,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSeaGreen">
            <summary>
            LightSeaGreen color (R:32,G:178,B:170,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSkyBlue">
            <summary>
            LightSkyBlue color (R:135,G:206,B:250,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSlateGray">
            <summary>
            LightSlateGray color (R:119,G:136,B:153,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightSteelBlue">
            <summary>
            LightSteelBlue color (R:176,G:196,B:222,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LightYellow">
            <summary>
            LightYellow color (R:255,G:255,B:224,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Lime">
            <summary>
            Lime color (R:0,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.LimeGreen">
            <summary>
            LimeGreen color (R:50,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Linen">
            <summary>
            Linen color (R:250,G:240,B:230,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Magenta">
            <summary>
            Magenta color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Maroon">
            <summary>
            Maroon color (R:128,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumAquamarine">
            <summary>
            MediumAquamarine color (R:102,G:205,B:170,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumBlue">
            <summary>
            MediumBlue color (R:0,G:0,B:205,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumOrchid">
            <summary>
            MediumOrchid color (R:186,G:85,B:211,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumPurple">
            <summary>
            MediumPurple color (R:147,G:112,B:219,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSeaGreen">
            <summary>
            MediumSeaGreen color (R:60,G:179,B:113,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSlateBlue">
            <summary>
            MediumSlateBlue color (R:123,G:104,B:238,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumSpringGreen">
            <summary>
            MediumSpringGreen color (R:0,G:250,B:154,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumTurquoise">
            <summary>
            MediumTurquoise color (R:72,G:209,B:204,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MediumVioletRed">
            <summary>
            MediumVioletRed color (R:199,G:21,B:133,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MidnightBlue">
            <summary>
            MidnightBlue color (R:25,G:25,B:112,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MintCream">
            <summary>
            MintCream color (R:245,G:255,B:250,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MistyRose">
            <summary>
            MistyRose color (R:255,G:228,B:225,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Moccasin">
            <summary>
            Moccasin color (R:255,G:228,B:181,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.MonoGameOrange">
            <summary>
            MonoGame orange theme color (R:231,G:60,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.NavajoWhite">
            <summary>
            NavajoWhite color (R:255,G:222,B:173,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Navy">
            <summary>
            Navy color (R:0,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.OldLace">
            <summary>
            OldLace color (R:253,G:245,B:230,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Olive">
            <summary>
            Olive color (R:128,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.OliveDrab">
            <summary>
            OliveDrab color (R:107,G:142,B:35,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Orange">
            <summary>
            Orange color (R:255,G:165,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.OrangeRed">
            <summary>
            OrangeRed color (R:255,G:69,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Orchid">
            <summary>
            Orchid color (R:218,G:112,B:214,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleGoldenrod">
            <summary>
            PaleGoldenrod color (R:238,G:232,B:170,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleGreen">
            <summary>
            PaleGreen color (R:152,G:251,B:152,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleTurquoise">
            <summary>
            PaleTurquoise color (R:175,G:238,B:238,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PaleVioletRed">
            <summary>
            PaleVioletRed color (R:219,G:112,B:147,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PapayaWhip">
            <summary>
            PapayaWhip color (R:255,G:239,B:213,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PeachPuff">
            <summary>
            PeachPuff color (R:255,G:218,B:185,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Peru">
            <summary>
            Peru color (R:205,G:133,B:63,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Pink">
            <summary>
            Pink color (R:255,G:192,B:203,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Plum">
            <summary>
            Plum color (R:221,G:160,B:221,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.PowderBlue">
            <summary>
            PowderBlue color (R:176,G:224,B:230,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Purple">
            <summary>
             Purple color (R:128,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Red">
            <summary>
            Red color (R:255,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.RosyBrown">
            <summary>
            RosyBrown color (R:188,G:143,B:143,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.RoyalBlue">
            <summary>
            RoyalBlue color (R:65,G:105,B:225,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SaddleBrown">
            <summary>
            SaddleBrown color (R:139,G:69,B:19,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Salmon">
            <summary>
            Salmon color (R:250,G:128,B:114,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SandyBrown">
            <summary>
            SandyBrown color (R:244,G:164,B:96,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SeaGreen">
            <summary>
            SeaGreen color (R:46,G:139,B:87,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SeaShell">
            <summary>
            SeaShell color (R:255,G:245,B:238,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Sienna">
            <summary>
            Sienna color (R:160,G:82,B:45,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Silver">
            <summary>
            Silver color (R:192,G:192,B:192,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SkyBlue">
            <summary>
            SkyBlue color (R:135,G:206,B:235,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SlateBlue">
            <summary>
            SlateBlue color (R:106,G:90,B:205,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SlateGray">
            <summary>
            SlateGray color (R:112,G:128,B:144,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Snow">
            <summary>
            Snow color (R:255,G:250,B:250,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SpringGreen">
            <summary>
            SpringGreen color (R:0,G:255,B:127,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.SteelBlue">
            <summary>
            SteelBlue color (R:70,G:130,B:180,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Tan">
            <summary>
            Tan color (R:210,G:180,B:140,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Teal">
            <summary>
            Teal color (R:0,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Thistle">
            <summary>
            Thistle color (R:216,G:191,B:216,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Tomato">
            <summary>
            Tomato color (R:255,G:99,B:71,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Turquoise">
            <summary>
            Turquoise color (R:64,G:224,B:208,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Violet">
            <summary>
            Violet color (R:238,G:130,B:238,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Wheat">
            <summary>
            Wheat color (R:245,G:222,B:179,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.White">
            <summary>
            White color (R:255,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.WhiteSmoke">
            <summary>
            WhiteSmoke color (R:245,G:245,B:245,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.Yellow">
            <summary>
            Yellow color (R:255,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.Color.YellowGreen">
            <summary>
            YellowGreen color (R:154,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Performs linear interpolation of <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="start">Source <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="end">Destination <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="amount">Interpolation factor.</param>
            <returns>Interpolated <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.LerpPrecise(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            <see cref="M:Microsoft.Xna.Framework.Color.Lerp(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)"/> should be used instead of this function.
            </summary>
            <returns>Interpolated <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Multiply(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Multiply <see cref="T:Microsoft.Xna.Framework.Color"/> by value.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="right">Multiplicator.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Multiply(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Multiply <see cref="T:Microsoft.Xna.Framework.Color"/> by value.
            </summary>
            <param name="left">Source <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="right">Multiplicator.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.op_Multiply(System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Multiply <see cref="T:Microsoft.Xna.Framework.Color"/> by value.
            </summary>
            <param name="left">Scalar value on the left of the mul sign.</param>
            <param name="right">Source <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToVector3">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Vector3"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector3"/> representation for this object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToVector4">
            <summary>
            Gets a <see cref="T:Microsoft.Xna.Framework.Vector4"/> representation for this object.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4"/> representation for this object.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Color"/> in the format:
            {R:[red] G:[green] B:[blue] A:[alpha]}
            </summary>
            <returns><see cref="T:System.String"/> representation of this <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(Microsoft.Xna.Framework.Vector4)">
            <summary>
            Translate a non-premultipled alpha <see cref="T:Microsoft.Xna.Framework.Color"/> to a <see cref="T:Microsoft.Xna.Framework.Color"/> that contains premultiplied alpha.
            </summary>
            <param name="vector">A <see cref="T:Microsoft.Xna.Framework.Vector4"/> representing color.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Color"/> which contains premultiplied alpha data.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.FromNonPremultiplied(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Translate a non-premultipled alpha <see cref="T:Microsoft.Xna.Framework.Color"/> to a <see cref="T:Microsoft.Xna.Framework.Color"/> that contains premultiplied alpha.
            </summary>
            <param name="r">Red component value.</param>
            <param name="g">Green component value.</param>
            <param name="b">Blue component value.</param>
            <param name="a">Alpha component value.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Color"/> which contains premultiplied alpha data.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Equals(Microsoft.Xna.Framework.Color)">
            <summary>
            Compares whether current instance is equal to specified <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="other">The <see cref="T:Microsoft.Xna.Framework.Color"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Deconstruct(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Deconstruct(System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Deconstruct(System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Color"/> with Alpha.
            </summary>
            <param name="r">Red component value from 0 to 255.</param>
            <param name="g">Green component value from 0 to 255.</param>
            <param name="b">Blue component value from 0 to 255.</param>
            <param name="a">Alpha component value from 0 to 255.</param>
        </member>
        <member name="M:Microsoft.Xna.Framework.Color.Deconstruct(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Deconstruction method for <see cref="T:Microsoft.Xna.Framework.Color"/> with Alpha.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
            <param name="a">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="T:Microsoft.Xna.Framework.DisplayOrientation">
            <summary>
            Defines the orientation of the display.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Default">
            <summary>
            The default orientation.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeLeft">
            <summary>
            The display is rotated counterclockwise into a landscape orientation. Width is greater than height.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.LandscapeRight">
            <summary>
            The display is rotated clockwise into a landscape orientation. Width is greater than height.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Portrait">
            <summary>
            The display is rotated as portrait, where height is greater than width.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.PortraitDown">
            <summary>
            The display is rotated as inverted portrait, where height is greater than width.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Framework.DisplayOrientation.Unknown">
            <summary>
            Unknown display orientation.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.GraphicsDeviceInformation">
            <summary>
            The settings used in creation of the graphics device.
            See <see cref="!:GraphicsDeviceManager.PreparingDeviceSettings"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.Adapter">
            <summary>
            The graphics adapter on which the graphics device will be created.
            </summary>
            <remarks>
            This is only valid on desktop systems where multiple graphics 
            adapters are possible.  Defaults to <see cref="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.GraphicsProfile">
            <summary>
            The requested graphics device feature set. 
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.GraphicsDeviceInformation.PresentationParameters">
            <summary>
            The settings that define how graphics will be presented to the display.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.IGraphicsDeviceManager">
            <summary>
            Used by the platform code to control the graphics device.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.CreateDevice">
            <summary>
            Called to create the graphics device.
            </summary>
            <remarks>Does nothing if the graphics device is already created.</remarks>
        </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.BeginDraw">
            <summary>
            Called at the start of rendering a frame.
            </summary>
            <returns>Returns true if the frame should be rendered.</returns>
        </member>
        <member name="M:Microsoft.Xna.Framework.IGraphicsDeviceManager.EndDraw">
            <summary>
            Called after rendering to present the frame to the screen.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs">
            <summary>
            The arguments to the <see cref="!:GraphicsDeviceManager.PreparingDeviceSettings"/> event.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.GraphicsDeviceInformation">
            <summary>
            The default settings that will be used in device creation.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Framework.PreparingDeviceSettingsEventArgs.#ctor(Microsoft.Xna.Framework.GraphicsDeviceInformation)">
            <summary>
            Create a new instance of the event.
            </summary>
            <param name="graphicsDeviceInformation">The default settings to be used in device creation.</param>
        </member>
        <member name="T:Microsoft.Xna.Platform.Graphics.VertexBufferCollection">
            <summary>
            Stores the vertex buffers to be bound to the input assembler stage.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.Count">
            <summary>
            Gets or sets the number of used input slots.
            </summary>
            <value>The number of used input slots.</value>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Xna.Platform.Graphics.VertexBufferCollection" /> class.
            </summary>
            <param name="maxVertexBufferSlots">The maximum number of vertex buffer slots.</param>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.Clear">
            <summary>
            Clears the vertex buffer slots.
            </summary>
            <returns>
            <see langword="true"/> if the input layout was changed; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.Set(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32)">
            <summary>
            Binds the specified vertex buffer to the first input slot.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">
            The offset (in vertices) from the beginning of the vertex buffer to the first vertex to 
            use.
            </param>
            <returns>
            <see langword="true"/> if the input layout was changed; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.Set(Microsoft.Xna.Framework.Graphics.VertexBufferBinding[])">
            <summary>
            Binds the the specified vertex buffers to the input slots.
            </summary>
            <param name="vertexBufferBindings">The vertex buffer bindings.</param>
            <returns>
            <see langword="true"/> if the input layout was changed; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.VertexBufferCollection.Get(System.Int32)">
            <summary>
            Gets vertex buffer bound to the specified input slots.
            </summary>
            <returns>The vertex buffer binding.</returns>
        </member>
        <member name="T:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities">
            <summary>
            Provides information about the capabilities of the
            current graphics device. A very useful thread for investigating GL extenion names
            http://stackoverflow.com/questions/3881197/opengl-es-2-0-extensions-on-android-devices
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsNonPowerOfTwo">
            <summary>
            Whether the device fully supports non power-of-two textures, including
            mip maps and wrap modes other than CLAMP_TO_EDGE
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsTextureFilterAnisotropic">
            <summary>
            Whether the device supports anisotropic texture filtering
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsDxt1">
            <summary>
            Gets the support for DXT1
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsS3tc">
            <summary>
            Gets the support for S3TC (DXT1, DXT3, DXT5)
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsPvrtc">
            <summary>
            Gets the support for PVRTC
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsEtc1">
            <summary>
            Gets the support for ETC1
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsEtc2">
            <summary>
            Gets the support for ETC2
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsAtitc">
            <summary>
            Gets the support for ATITC
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsSRgb">
            <summary>
            True, if sRGB is supported. On Direct3D platforms, this is always <code>true</code>.
            On OpenGL platforms, it is <code>true</code> if both framebuffer sRGB
            and texture sRGB are supported.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsFloatTextures">
            <summary>
            True, if the underlying platform supports floating point textures. 
            For Direct3D platforms this is always <code>true</code>.
            For OpenGL Desktop platforms it is always <code>true</code>.
            For OpenGL Mobile platforms it requires `GL_EXT_color_buffer_float`.
            If the requested format is not supported an <code>NotSupportedException</code>
            will be thrown.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.SupportsHalfFloatTextures">
            <summary>
            True, if the underlying platform supports half floating point textures. 
            For Direct3D platforms this is always <code>true</code>.
            For OpenGL Desktop platforms it is always <code>true</code>.
            For OpenGL Mobile platforms it requires `GL_EXT_color_buffer_half_float`.
            If the requested format is not supported an <code>NotSupportedException</code>
            will be thrown.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsCapabilities.MaxTextureAnisotropy">
            <summary>
            Gets the max texture anisotropy. This value typically lies
            between 0 and 16, where 0 means anisotropic filtering is not
            supported.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsContextStrategy.DiscardColor">
            <summary>
            Get or set the color a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> is cleared to when it is set.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.GraphicsContextStrategy.GraphicsDebug">
            <summary>
            Access debugging APIs for the graphics subsystem.
            </summary>
        </member>
        <member name="F:Microsoft.Xna.Platform.Graphics.GraphicsDeviceStrategy.EffectCache">
            <summary>
            The cache of effects from unique byte streams.
            </summary>
        </member>
        <member name="E:Microsoft.Xna.Platform.Graphics.GraphicsDeviceStrategy.Disposing">
            <summary>
            Raised when the GraphicsResource is disposed or finalized.
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Platform.Graphics.IRenderTarget">
            <summary>
            Represents a render target.
            </summary>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.IRenderTarget.Width">
            <summary>
            Gets the width of the render target in pixels
            </summary>
            <value>The width of the render target in pixels.</value>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.IRenderTarget.Height">
            <summary>
            Gets the height of the render target in pixels
            </summary>
            <value>The height of the render target in pixels.</value>
        </member>
        <member name="P:Microsoft.Xna.Platform.Graphics.IRenderTarget.RenderTargetUsage">
            <summary>
            Gets the usage mode of the render target.
            </summary>
            <value>The usage mode of the render target.</value>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.SamplerStateCollectionStrategy.Dirty">
            <summary>
            Mark all the sampler slots as dirty.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.TextureCollectionStrategy.Dirty">
            <summary>
            Marks all texture slots as dirty.
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.Utilities.HashHelper.ComputeHash(System.Byte[])">
            <summary>
            Compute a hash from a byte array.
            </summary>
            <remarks>
            Modified FNV Hash in C#
            http://stackoverflow.com/a/468084
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.Utilities.HashHelper.ComputeHash(System.IO.Stream)">
            <summary>
            Compute a hash from the content of a stream and restore the position.
            </summary>
            <remarks>
            Modified FNV Hash in C#
            http://stackoverflow.com/a/468084
            </remarks>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.Utilities.ReflectionHelpers.GetAssembly(System.Type)">
            <summary>
            Returns the Assembly of a Type
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.Utilities.ReflectionHelpers.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Returns true if the given type can be assigned the given value
            </summary>
        </member>
        <member name="M:Microsoft.Xna.Platform.Graphics.Utilities.ReflectionHelpers.IsAssignableFromType(System.Type,System.Type)">
            <summary>
            Returns true if the given type can be assigned a value with the given object type
            </summary>
        </member>
        <member name="T:Microsoft.Xna.Platform.Graphics.Utilities.ReflectionHelpers.ManagedSizeOf`1">
            <summary>
            Generics handler for Marshal.SizeOf
            </summary>
        </member>
    </members>
</doc>
